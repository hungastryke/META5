package {		// Tweener, Flash class and Greate White Papervision3D 2.0	import caurina.transitions.*;		import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.net.*;	import flash.text.*;	import flash.ui.Mouse;	import flash.ui.Keyboard;	import flash.utils.Dictionary;	import flash.utils.*;	import fl.video.VideoEvent;	import flash.media.*;	import fl.transitions.*; 	import fl.transitions.easing.*;		import fl.controls.*;	import fl.events.SliderEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.Timer;	import caurina.transitions.Tweener;		import org.papervision3d.*;	import org.papervision3d.cameras.*;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.*;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;		/*import com.webdevils.controls.SimpleScrollBar;	import com.webdevils.events.ScrollBarEvent;*/		//import com.rimv.net.VideoPlayer;	import com.rimv.net.Meta5dataSearch;	import com.rimv.net.Search;		import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.TweenLite;    import com.greensock.TweenMax;	import com.greensock.plugins.*;	TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, GlowFilterPlugin, BlurFilterPlugin, TransformAroundCenterPlugin]);	//_________________________________________________ MAIN CLASS		public class Metavideo extends Sprite	{		//------------------------ PARAMETERS -----------------------//		// Tweening parameters, more Tweener information at:		// http://hosted.zeh.com.br/tweener/docs/en-us/		private var easeFactor:Number = 0.01; // easing of camera's orientation 		private var cameraTweenTime:Number = 2;		private var cameraTweenEasing:String = "easeOutQuint";		private var scrubberTweenTime:Number = 1;		private var planeTweenTime:Number = 2;		private var planeTweenEasing:String = "easeOutQuint";				// Gallery property		private var itemDistance:Number = 700;		private var itemAngle:Number = 20;				// Drag speed		private var dragSpeed:Number = 0.05;				// Camera Default property		private var cameraZMin:Number = 250;		private var cameraY:Number = 0;		private var cameraZDefault:Number = -600;		// camera angle delta		private var CAMDELTA:Number = 20;				// Plane infor		private var planeDoubleSide:Boolean = false;		private var planeSmooth:Boolean = true;		private var planePrecise:Boolean = true;		private var transparent:Boolean = false;		private var quality:Number = 1;				// Reflection		private var reflection:Boolean = true; // turn on/off reflection		private var refDist:Number = 150;  	//Distance from image to its corresponding reflection		private var refCateDist:Number = 500;  	//Distance from category image to its corresponding reflection		private var refIn1:Number = 0.5;	// Reflection Intensity 1		private var refIn2:Number = 0;		// Reflection Intensity 2		private var refDen1:Number = 0;		// Reflection Density 1		private var refDen2:Number = 100;	// Reflection Density 2		private var refSmooth:Boolean = false;	// Smooth Reflection		private var refDoubleSide:Boolean = false;	// 2 side Reflection				// XML/CSS path		private var mainXML:String = "functions.php";	// XML path		private var css_path:String = "css/styles.css" // CSS path				//--------------- end of -- PARAMETERS -----------------------//								//------------------------ 3D VARS --------------------------//				private var scene:Scene3D = new Scene3D();		private var camera:FreeCamera3D = new FreeCamera3D();		private var cameraZoom:Number = 4.5;		private var viewport:Viewport3D;		private var renderer:BasicRenderEngine = new BasicRenderEngine();						//--------------- end of -- 3D VARS -----------------------//						//------------------------ XML VARS --------------------------//				private var xmlLoader:URLLoader = new URLLoader();		private	var xmlData:XML = new XML();				//--------------- end of -- XML VARS -----------------------//						//------------------------ GENERAL DATA --------------------------//				private var TOTAL:Number; 	// Number of images/videos/mp3s		private var description:Array = new Array();				//------------------------ GENERAL DATA --------------------------//				//------------------------ MISC VARS -----------------------//		private var cID:Number = 0;	// Current pressed plane ID		private var currentPlane:Plane;		private var currentItem:Number;		private var currentPhoto:Number = undefined;		private var currentLoader:Loader;		private var bytesLoaded:Number = 0;		private var bytesTotal:Number = 1;		private var targetX:Number;		private var maxX:Number;		private var dragMode:Boolean = false;		private var openMode:Boolean = false;		private var count:Number = 0;		private var handMode:MovieClip;		private var items:Array = new Array();		private var itemInfor:Dictionary = new Dictionary();		private var cameraCenter:Number;		private var itemRollOver:Boolean = false;		private var descBoardRollOver:Boolean = false;		private var itemSelected:Boolean = false;		private var demoEnded:Boolean = false;		private var css:StyleSheet = new StyleSheet(); // StyleSheet		public var dragging:Boolean = false;		public var isSearch:Boolean = false;		public var str:String = new String();		private var position:int;				//public var player:VideoPlayer;				/* VIDEO VARS */		public const PLAYHEAD_UPDATE_INTERVAL_MS:uint = 10;		public const DISPLAY_TIMER_UPDATE_DELAY:uint = 300;		public var client:Object;		public var meta:Object;		public var nc:NetConnection;		public var ns:NetStream;		public var playlist:XML;		public var t:Timer;		public var uldr:URLLoader;		public var vid:Video;		public var volumeTransform:SoundTransform;						//------------------------ MISC VARS -----------------------//				public var graffiti:my_graffiti = new my_graffiti();		//public var colorful:clean = new clean();		//public var info:footer = new footer();		public var descBoard:descBoard2 = new descBoard2();		public var nav:menu = new menu();		public var audiophile:audio_file = new audio_file();		public var videophile:video_file = new video_file();		public var videophile_over:video_over = new video_over();		public var searchphile:search_file = new search_file();		//public var searchphile_over:search_over = new search_over();		public var searchphile_over:search_over = new search_over();		public var helphile:help_file = new help_file();		public var uploadphile:upload_file = new upload_file();		public var helphile_over:help_file_over = new help_file_over();		public var audiophile_over:audio_over = new audio_over();		public var helphile_selected:help_file_over = new help_file_over();		public var _searchOut:searchbtn_out = new searchbtn_out();		public var _searchOver:searchbtn_over = new searchbtn_over();		public var uploadphile_over:upload_over = new upload_over();		public var forward:nav_forward = new nav_forward();		public var backward:nav_backward = new nav_backward();		//public var search:searchBar = new searchBar();		public var close_mc:closing = new closing();		public var _controlp:cpanel = new cpanel();		//public var panels:desc_bg = new desc_bg();		public var play_button:playBut=new playBut;		//public var pause_button:pauseBtn=new pauseBtn;		public var myContent:controls=new controls;		public var captions:Array = new Array;		public var desc:Array = new Array;		public var head:Array = new Array;		public var pBar:ProgressBar=new ProgressBar;		public var mySlider:Slider=new Slider;		public var volume:volume_holder = new volume_holder();		public var fullest:fullscreenOut = new fullscreenOut();		public var fullestOver:fullscreenOver = new fullscreenOver();		public var fullback:fullbackOut = new fullbackOut();		public var fullOver:fullbackOver = new fullbackOver();		public var replay:replay_button = new replay_button();		public var myLabel:Label=new Label;		/*public var tBar:whiteBar=new whiteBar;		public var bBar:whiteBar=new whiteBar;*/		public var cap:TextField = new TextField();		public var dek:TextField = new TextField();		//public var nav:TextField = new TextField();		public var fadeTime:Number=.15;				public var vidback:video_background = new video_background();		public var extension:video_extension = new video_extension();		public var closeVid:close_button = new close_button();		public var audible:volumeslider = new volumeslider();				//old calls		public var warning:browser_warning = new browser_warning();		public var warning_screen:browser_screen = new browser_screen();		//public var blackout:search = new search();		public var closure:close_out = new close_out();		public var closurephile:close_over = new close_over();		public var closeBtnOut:close_search = new close_search();		public var closeBtnOver:unavailable_over = new unavailable_over();		public var startVid:video_play = new video_play();		public var startVidover:video_play_over = new video_play_over();		public var pauseVid:video_pause = new video_pause();		public var pauseVidover:video_pause_over = new video_pause_over();		public var rwdVid:video_rwd = new video_rwd();		public var rwdVidover:video_rwd_over = new video_rwd_over();		public var fwdVid:video_fwd = new video_fwd();		public var fwdVidover:video_fwd_over = new video_fwd_over();		public var paneOut:windowpaneOut = new windowpaneOut();		public var paneOver:windowpaneOver = new windowpaneOver();		//public var cap:TextField = new TextField();		public var capXpos:int = stage.stageWidth/2;		public var capYpos:int = stage.stageHeight/2;		public var uploadURL:URLRequest;        public var file:FileReference;		public var understand:understanding = new understanding();		public var returnvideo:backtovid = new backtovid();		private var meta5Search:Meta5dataSearch ;								//___________________________________________________ CONSTRUCTOR: Intial 3D and Start creating Gallery				public function Metavideo()		{			// Initial 3d environment			Initial3D();						// Create 3D Gallery			create3DGallery();				//trace(stage.stageWidth);			position = 1;			//keyDownIt();					}				// Inital 3D		public function Initial3D():void		{			// Align , scale Stage to full fill screen			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			buttonMode = true;			// Reposition element if stage is resized			stage.addEventListener(	Event.RESIZE, rePosition);						// Add Mouse Cursor			handMode = hand;			handDrag.visible = false;			Mouse.hide();			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);			// Stretch preloader to fit stage dimension			preloaderEach.progressBar.width = preloaderEach.backPreloader.width = stage.stageWidth;			// Temporary remove components			//removeChild(descBoard);			//removeChild(preloaderFull);					removeChild(preloaderEach);						removeChild(fullDescription);			fullDescription.content.width = stage.stageWidth - 5;			fullDescription.back.width = stage.stageWidth;			fullDescription.content.autoSize = TextFieldAutoSize.LEFT;						// Viewport			viewport = new Viewport3D(stage.stageWidth, stage.stageHeight, true, true);			addChild(viewport);			viewport.y = (stage.stageHeight/2)*(-(0.1));//14084507042253521;////(stage.stageHeight/2) - 420;						//search is invisible			search.visible = false;			blackout.visible = false;			blackout.alpha = .55;						//description box			removeChild(myDesc);			myDesc.visible = false;						removeChild(shortName);			shortName.title.visible = false;									//removeChild(shortDesc);			//shortDesc.album.visible = false;						//trace("Album.x: " +shortDesc.album.x);			//trace("Album.y: " +shortDesc.album.y);			trace("Title.x: " +shortName.title.x);			trace("Title.y: " +shortName.title.y);						addChild(hand);			addChild(handDrag);						// Camera 3D			camera.zoom = cameraZoom;			camera.y = 0;			camera.z = cameraZDefault;			camera.x = -stage.stageWidth;			// preloader			preloaderFull.x = stage.stageWidth / 2;			preloaderFull.y = stage.stageHeight / 2; 			preloaderEach.x = 0;			preloaderEach.y = stage.stageHeight / 2;			// init Stylesheet			initStyleSheet();		}						// Create Gallery		public function create3DGallery():void 		{			// Load category from XML			xmlLoad(mainXML);						/*player = new VideoPlayer();			trace(player);			addChild(player);			player.visible = false;			*/		}				//__________________________________________________________ LOAD XML				private function xmlLoad(xmlPath:String):void		{			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			xmlLoader.load(new URLRequest(xmlPath));		}				private function xmlLoaded(e:Event):void		{			//Extract data			xmlData = new XML(e.target.data);			ParseGallery(xmlData);		}				public function search3DGallery(_searchString:String):void 		{			meta5Search = new Meta5dataSearch(_searchString);			meta5Search.addEventListener( Event.COMPLETE, make_gallery_search );			//addChild(preloaderFull);			//preloaderFull.loadText.text = "Locked & Loading!";			//isSearch = true ;		}				public function make_gallery_search( e:Event ):void {						//var it = meta5Search.getCollection().iterator();						//TOTAL = meta5Search.getCollection().length;			//removeChild(preloaderFull);			//trace("TOTAL=" + TOTAL) ;			trace("-->" + meta5Search.resultXml) ;			//trace("xml" + meta5Search.resultXml) ;			//***LOOP OVER			var _numCrrntLists:int = (xmlData..item.length() - 1) ;			trace(_numCrrntLists);			for (var i:int = 0; i <= _numCrrntLists  ; i++) {				scene.removeChildByName("item" + i) ;				scene.removeChildByName("reflection" + i) ;			}			xmlData = meta5Search.resultXml ;						//Extract data			//xmlData = meta5Search.resultXml ;			//ParseGallery(meta5Search.resultXml);			//xmlLoad(mainXML);			ParseGallery(xmlData);			camera.x = stage.stageWidth/2.057142857142857;		}				//****END SEARCH FUNCTIONS***				private function ParseGallery(data:XML):void		{			//Number of category			TOTAL = data.item.length();						// Show preloader						//addChild(preloaderFull);			//preloaderFull.loadText.text = "Loading Asset: 0/" + TOTAL;						// data saved in separate arrays			for (var i:uint = 0; i < TOTAL; i++)			{				trace(data..asset[i]);				items[i] = new Object();				items[i].title = data..title[i];				items[i].asset = data..asset[i];				items[i].promo = data..promo[i];				items[i].recording = data..recording[i];				items[i].caption = data..caption[i];				items[i].stuff = data..stuff[i];								//items[i].full = data.items.item.assetFull.text()[i];				//trace(items[i].title);				//trace(items[i].asset);				//trace(items[i].promo);				//trace(items[i].recording);				//trace(items[i].caption);				//trace(items[i].full);								//Load Items				var myLoader:Loader = new Loader();				var myRequest:URLRequest = new URLRequest(data..asset[i]);				myLoader.load(myRequest);				myLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, itemLoaded);				itemInfor[myLoader] = i;			}		}				//___________________________________________ FULL VERSION LOADED (Photo, SWF only)				private function fullLoaded():void		{					}				// Go Back To Main		private function goBackToMain(e:Event):void		{			// Hide description and full item			Tweener.addTween(fullDescription, {y:stage.stageHeight, time:1});			// Show 3d plane			for (var i:uint = 0; i < TOTAL; i++)			{				var p = scene.getChildByName("item" + i) as Plane;				Tweener.addTween([p, p.extra.reflection], 									{	rotationY:0,										time:2,										onUpdate:function():void												{													// Render 3D													renderer.renderScene(scene, camera, viewport);												}									});			}			handMode = hand;			Mouse.show();			descBoard.alpha = 0;			descBoard.visible = true;			Tweener.addTween(descBoard,	{	alpha:1, time:2});			Tweener.addTween(forward, {y: stage.stageHeight+60, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			Tweener.addTween(backward, {y: stage.stageHeight+60, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			//descBoard.desc_mc.visible = true;			descBoard.title.visible = true;			//descBoard.album.visible = true;			//descBoard.desc_mc.alpha = 0;			descBoard.title.alpha = 0;			descBoard.album.alpha = 0;		}				//___________________________________________ ITEM LOADED				// Category image loaded create 3d plane		private function itemLoaded(e:Event):void		{			var image:Loader = e.target.loader;			shortName.title.visible = false;			//shortDesc.visible = false;			//shortDesc.album.visible = false;									// retrieve thumbnail			var loadedObject:Loader = e.target.loader;									// Bitmapdata			var bmpData:BitmapData = new BitmapData( loadedObject.width, loadedObject.height, transparent, 0x000000 );			bmpData.draw(loadedObject);						//Bitmap Material			var bitmapMaterial:BitmapMaterial = new BitmapMaterial(bmpData);			bitmapMaterial.precise = true;			bitmapMaterial.interactive = true;			bitmapMaterial.doubleSided = planeDoubleSide;			bitmapMaterial.smooth = true;			bitmapMaterial.name = "material";						// Create category plane			var p:Plane = new Plane(bitmapMaterial, loadedObject.width, loadedObject.height, quality, quality);									//retrieve index			var index:Number = itemInfor[loadedObject];								// add to scene			scene.addChild( p, "item" + index );									// data embeded in each plane			p.extra = {				index:new Number			}						// save index for later reference			p.extra.index = index;			p.x = index * itemDistance;									//______________________________________________________________ REFLECTION						if (reflection) 			{				// save reflection for later use				p.extra.reflection = new Plane();								// Create new reflection Bitmap Data 				var bitmapData2:BitmapData = new BitmapData( loadedObject.width, loadedObject.height, true, 0x000000);								// Flip vertical				var m:Matrix = new Matrix();				m.createBox(1, -1, 0, 0, loadedObject.height);				bitmapData2.draw( bmpData, m );								//Reflection Bitmap Object				var b2:Bitmap = new Bitmap(bitmapData2);								// Reflection mask				m.createGradientBox(loadedObject.width, loadedObject.height, Math.PI/2, loadedObject.height);				var mymask:Shape = new Shape();				mymask.graphics.lineStyle(0,0,0);				mymask.graphics.beginGradientFill("linear", [0x000000, 0x000000],[refIn1, refIn2], [refDen1, refDen2],m) ;				mymask.graphics.lineTo(0, loadedObject.height);				mymask.graphics.lineTo(loadedObject.width, loadedObject.height);				mymask.graphics.lineTo(loadedObject.width, 0)				mymask.graphics.lineTo(0, 0)				mymask.graphics.endFill();								// CacheaAsBitmap				mymask.cacheAsBitmap = true;				b2.cacheAsBitmap = true;								// Create mask				b2.mask = mymask;				addChild(b2);				addChild(mymask);								var bmp3:BitmapData = new BitmapData(loadedObject.width, loadedObject.height, true, 0x000000);				bmp3.draw(b2);				// Create Reflection plane				var bm2:BitmapMaterial = new BitmapMaterial(bmp3);				bm2.precise = false;				bm2.doubleSided = false;				bm2.smooth = false;				var p2:Plane = new Plane(bm2, loadedObject.width, loadedObject.height, quality, quality);								p2.x = p.x;				p2.z = p.z				p2.y = -refCateDist + p.y;				p.extra.reflection = p2;								scene.addChild(p2,"reflection" + index);				removeChild(b2);				removeChild(mymask);			}									// Interactive Roll Over, Roll Out, Press/Release			p.addEventListener( InteractiveScene3DEvent.OBJECT_RELEASE, onItemRelease, false, 0, true );			p.addEventListener( InteractiveScene3DEvent.OBJECT_OVER, onItemRollOver, false, 0, true );			p.addEventListener( InteractiveScene3DEvent.OBJECT_OUT, onItemRollOut, false, 0, true );			currentPlane = p;											preloaderFull.loadText.text = "Loading Asset: " + (count + 1) + "/" + TOTAL;						// Finish loading, add interactive			if (++count == TOTAL) 			{				maxX = (TOTAL - 1) * itemDistance;				// Remove preloader				removeChild(preloaderFull);												// Add descBoard button function				descBoard.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);				descBoard.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);				descBoard.Previous.addEventListener(MouseEvent.MOUSE_DOWN, PreviousItem);				descBoard.Previous.addEventListener(MouseEvent.MOUSE_OVER, PreviousOver);				descBoard.Previous.addEventListener(MouseEvent.MOUSE_OUT, PreviousOut);				//descBoard.Previous.addEventListener(MouseEvent.CLICK, stopTrack);				descBoard.Previous.buttonMode = true;				descBoard.Previous.mouseChildren = false;				descBoard.Previous.gotoAndStop( "_up" );				//descBoard.Next.buttonMode = true;				descBoard.Next.addEventListener(MouseEvent.MOUSE_DOWN, NextItem);				descBoard.Next.addEventListener(MouseEvent.MOUSE_OVER, NextOver);				descBoard.Next.addEventListener(MouseEvent.MOUSE_OUT, NextOut);				descBoard.Next.mouseChildren = false;				descBoard.Next.buttonMode = true;				descBoard.Next.gotoAndStop( "_up" );								/*descBoard.fullVideo.addEventListener(MouseEvent.MOUSE_OVER, OpenOver);				descBoard.fullVideo.addEventListener(MouseEvent.MOUSE_OUT, OpenOut);				descBoard.fullVideo.addEventListener(MouseEvent.CLICK, videoScreen);				*/descBoard.Previous.alpha = 0;				descBoard.Next.alpha = 0;				descBoard.fullVideo.alpha = 0;												setupStageMouseDown();				setupStageMouseUp();				openEffect();				control();				controlMenu();				main();			}			}				public function main():void {						volumeTransform = new SoundTransform();			client = new Object();			client.onMetaData = metadataHandler;			nc = new NetConnection();			nc.connect(null);			ns = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.addEventListener(NetStatusEvent.NET_STATUS, videoStatusEvent);			ns.client = client;						/* Initialize the Video object, attach the NetStram, and add the Video object to the display list. */			vid = new Video();            vid.x = stage.stageWidth/2 - 310; //900-704            vid.y = stage.stageHeight/2 - 194;			trace(1440 - descBoard.x);			vid.attachNetStream(ns);			addChild(vid);			vid.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			vid.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);						/* Initialize the Timer object and set the delay to PLAYHEAD_UPDATE_INTERVAL_MS milliseconds. */			t = new Timer(PLAYHEAD_UPDATE_INTERVAL_MS);			t.addEventListener(TimerEvent.TIMER, timerHandler);			pBar.mode = ProgressBarMode.MANUAL;			mySlider.value = volumeTransform.volume;			mySlider.minimum = 0;			mySlider.maximum = 1;			mySlider.snapInterval = 0.1;			mySlider.tickInterval = mySlider.snapInterval;			mySlider.liveDragging = true;			mySlider.addEventListener(SliderEvent.CHANGE, volumeChangeHandler);			//ns.play("asset/video/1.mov");		}				public function volumeChangeHandler(event:SliderEvent):void {			// Set the volumeTransform's volume property to the current value of the 			// Slider and set the NetStream object's soundTransform property.			volumeTransform.volume = event.value;			ns.soundTransform = volumeTransform;		}				public function netStatusHandler(event:NetStatusEvent):void {			try {				trace(event.info.code);				switch (event.info.code) {					case "NetStream.Play.Start" :						// If the current code is Start, start the timer object.						t.start();						break;					case "NetStream.Play.StreamNotFound" :					case "NetStream.Play.Stop" :						// If the current code is Stop or StreamNotFound, stop 						// the timer object and play the next video in the playlist.						t.stop();						Mouse.show();						handMode.visible = false;						//playNextVideo();						break;				}			} catch (error:TypeError) {				// Ignore any errors.				trace(error);			}		}				public function metadataHandler(metadataObj:Object):void {			// Store the metadata information in the meta object.			meta = metadataObj;			// Resize the Video instance on the display list with the video's width 			// and height from the metadata object.			vid.width = meta.width;			vid.height = meta.height;			vid.width = 620;			vid.height = 349;		}				public function timerHandler(event:TimerEvent):void {			try {				// Update the progress bar and label based on the amount of video				// that has played back.				pBar.setProgress(ns.time, meta.duration);				myLabel.text = ns.time.toFixed(1) + " of " + meta.duration.toFixed(1) + " seconds";				var format:TextFormat = new TextFormat();				format.color = 0xCCCCCC;						} catch (error:Error) {				// Ignore this error.			}		}				public function control():void {						// load and tween control tweens here			Tweener.addTween(helphile, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(helphile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(audiophile, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(audiophile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(videophile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(helphile, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(helphile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(searchphile, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(searchphile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(uploadphile, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(uploadphile_over, {y: stage.stageHeight-50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(_controlp, {y: stage.stageHeight-50, alpha: 1, time: .5, delay: .40, transition: "Elastic.easeInOut"});			Tweener.addTween(forward, {y: stage.stageHeight-50, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			TweenMax.to(forward, 1, {glowFilter:{color:0xCCCCCC, alpha:1, blurX:10, blurY:10}}); //0x91e600			Tweener.addTween(backward, {y: stage.stageHeight-50, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			TweenMax.to(forward, 1, {glowFilter:{color:0xCCCCCC, alpha:1, blurX:10, blurY:10}}); //0x91e600			TweenMax.to(backward, 1, {glowFilter:{color:0xCCCCCC, alpha:1, blurX:10, blurY:10}}); //0x91e600			TweenMax.to(_controlp, 1, {glowFilter:{color:0x666666, alpha:1, blurX:10, blurY:10}}); //0x91e600			backward.visible = false;			forward.visible = false;					}				public function controlOut():void {						// load and tween control tweens here			Tweener.addTween(helphile, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(helphile_over, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(audiophile, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			//Tweener.addTween(audiophile_selected, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(videophile_over, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(searchphile, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(searchphile_over, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			//Tweener.addTween(searching, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(uploadphile, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(uploadphile_over, {y: stage.stageHeight+50, time: .5, delay: .4, transition: "Elastic.easeInOut"});			Tweener.addTween(_controlp, {y: stage.stageHeight+50, alpha: 1, time: .5, delay: 0.4, transition: "Elastic.easeInOut"});			forward.visible = false;			backward.visible = false;			Tweener.addTween(forward, {y: stage.stageHeight+50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(backward, {y: stage.stageHeight+50, time: .5, delay: .35, transition: "Elastic.easeInOut"});			TweenMax.to(_controlp, 1, {glowFilter:{color:0x666666, alpha:0, blurX:10, blurY:10}}); //0x91e600					}				public function searchcontrol():void {						Tweener.addTween(search, {y: stage.stageHeight+50, alpha: 1, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(_searchOut, {y: stage.stageHeight+55, alpha: 1, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(_searchOver, {y: stage.stageHeight+55, alpha: 1, time: .5, delay: .35, transition: "Elastic.easeInOut"});			Tweener.addTween(close_mc, {y: stage.stageHeight+55, alpha: 1, time: .5, delay: .35, transition: "Elastic.easeInOut"});								}						// Button Interactive		// DESC BOARD		private function descBoardOver(e:Event):void		{			if (!openMode)			{				Mouse.show();				handMode.visible = false;							}						}				private function descBoardOut(e:Event):void		{			if (!openMode)			{				Mouse.hide();				handMode.visible = true;				stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);				stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);			}		}				// OPEN		private function OpenItem(e:Event):void		{			openMode = true;			// Flip all planes			for (var i:uint = 0; i < TOTAL; i++)			{				var p = scene.getChildByName("item" + i) as Plane;				Tweener.addTween([p, p.extra.reflection], 									{	rotationY:180,										time:2,										onUpdate:function():void												{													// Render 3D													renderer.renderScene(scene, camera, viewport);												}									});			}			// Fade descBoard			Tweener.addTween(descBoard, {	alpha:0,											time:1,											onComplete:function():void											{												descBoard.visible = false;											}											});			hand.visible = false;			handDrag.visible = false;			Mouse.show();						// Load full version			// Show description			fullDescription.content.htmlText = items[currentItem].description;			fullDescription.y = stage.stageHeight;			// Add description to top layer			addChild(fullDescription);			Tweener.addTween(fullDescription, {	y:stage.stageHeight - fullDescription.height, time:2});		}				private function OpenOver(e:Event):void		{			descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.hide();			handMode.visible = true;		}				private function OpenOut(e:Event):void		{			descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;		}				// PREVIOUS		private function PreviousItem(e:Event):void		{			if (currentItem > 0) displayItem(--currentItem);			descBoard.Previous.gotoAndStop( "_up" );			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			descBoard.title.alpha = 1;			descBoard.album.alpha = 1;			descBoard.recording.alpha = 1;			checkVid();					}				private function PreviousOver(e:Event):void		{			descBoardRollOver = true;			e.target.gotoAndPlay(2);			descBoard.Previous.gotoAndStop( "_over" );					}				private function PreviousOut(e:Event):void		{			descBoardRollOver = false;			e.target.gotoAndPlay(21);			descBoard.Previous.gotoAndStop("_up");					}						private function backOver(e:Event):void		{			descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			arrowDisplay();			TweenMax.to(backward, 1, {glowFilter:{color:0x0099cc, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				private function backOut(e:Event):void		{			descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			arrowDisplay();			TweenMax.to(backward, 1, {glowFilter:{color:0x0099cc, alpha:0, blurX:10, blurY:10}}); //0x91e600					}								// NEXT		private function NextItem(e:Event):void		{			if (currentItem < TOTAL - 1) displayItem(++currentItem);			descBoard.Next.gotoAndStop( "_up" );			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			descBoard.title.alpha = 1;			descBoard.album.alpha = 1;			descBoard.recording.alpha = 1;			checkVid();		}				private function NextOver(e:Event):void		{			descBoardRollOver = true;			e.target.gotoAndPlay(2);			descBoard.Next.gotoAndStop( "_over" );		}				private function NextOut(e:Event):void		{			descBoardRollOver = false;			e.target.gotoAndPlay(21);			descBoard.Next.gotoAndStop( "_up" );		}				private function forwardOver(e:Event):void		{			descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			arrowDisplay();			TweenMax.to(forward, 1, {glowFilter:{color:0x0099cc, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				private function forwardOut(e:Event):void		{			descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			arrowDisplay();			TweenMax.to(forward, 1, {glowFilter:{color:0x0099cc, alpha:0, blurX:10, blurY:10}}); //0x91e600					}				public function checkVid():void {						if (vid.visible = true) {								paneOut.visible = true;				myDesc.visible = false;				forward.visible = true;				backward.visible = true;						} 					}				// menu controls tween effects start here		private function helpOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			helphile.visible = false;			helphile_over.visible = true;		}						private function helpOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			helphile.visible = true;			helphile_over.visible = false;		}						private function help_page(e:Event):void {						var request:URLRequest=new URLRequest("../information.html");			navigateToURL(request,"_parent");			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}								private function home_page(e:Event):void {						var request:URLRequest=new URLRequest("../index.html");			navigateToURL(request,"_parent");			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}				private function audioOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			audiophile.visible = false;			audiophile_over.visible = true;			TweenMax.to(audiophile_over, 1, {glowFilter:{color:0xc9def8, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				private function audioOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			audiophile.visible = true;			audiophile_over.visible = false;					}				private function audio_page(e:Event):void {						var request:URLRequest=new URLRequest("../audio/index.php");			navigateToURL(request,"_parent");			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}				private function videoOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			videophile.visible = false;			videophile_over.visible = true;			TweenMax.to(videophile_over, 1, {glowFilter:{color:0xc9def8, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				private function videoOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			videophile.visible = true;			videophile_over.visible = false;					}				private function video_page(e:Event):void {						var request:URLRequest=new URLRequest("index.php");			navigateToURL(request,"_parent");			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}				private function uploadOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			uploadphile.visible = false;			uploadphile_over.visible = true;			TweenMax.to(uploadphile_over, 1, {glowFilter:{color:0xc9def8, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				private function uploadOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			uploadphile.visible = true;			uploadphile_over.visible = false;					}				private function upload_page(e:Event):void {						var request:URLRequest=new URLRequest("../uploads.html");			navigateToURL(request,"_parent");			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			        }						/***********************************************/				private function searchOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;			searchphile.visible = false;			searchphile_over.visible = true;			TweenMax.to(searchphile_over, 1, {glowFilter:{color:0xc9def8, alpha:1, blurX:15, blurY:15}}); //0x91e600					}				private function searchOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			searchphile.visible = true;			searchphile_over.visible = false;					}				public function searchMc(e:Event):void {						trace(search.y);			search.visible = true;			search.alpha = 1;			Tweener.addTween(search, {y: stage.stageHeight-50, alpha: 1, time: 1, delay: 0.75, transition: "Elastic.easeInOut"});			Tweener.addTween(_searchOut, {y: stage.stageHeight-52, alpha: 1, time: 1, delay: 0.75, transition: "Elastic.easeInOut"});			Tweener.addTween(_searchOver, {y: stage.stageHeight-52, alpha: 1, time: 1, delay: 0.75, transition: "Elastic.easeInOut"});			Tweener.addTween(close_mc, {y: stage.stageHeight-52, alpha: 1, time: 1, delay: .8, transition: "Elastic.easeInOut"});			controlOut();			_searchOut.visible = true;			_searchOut.alpha = 1;			close_mc.visible = true;			close_mc.alpha = 1;			close_mc.addEventListener(MouseEvent.MOUSE_OVER, overBar);			close_mc.addEventListener(MouseEvent.MOUSE_OUT, outBar);			close_mc.addEventListener(MouseEvent.CLICK, hideBar);						stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			stage.removeEventListener(MouseEvent.CLICK, stageUp);			stage.removeEventListener(MouseEvent.CLICK, stageDown);								}				public function mySearchOver(e:Event):void {						TweenMax.to(_searchOut, 1, {glowFilter:{color:0xc9def8, alpha:1, blurX:15, blurY:15}}); //0x91e600					}				public function mySearchOut(e:Event):void {						TweenMax.to(_searchOut, 1, {glowFilter:{color:0xc9def8, alpha:0, blurX:15, blurY:15}}); //0x91e600					}				public function init_resetList(e:Event):void {						trace('resetList') ;			//***LOOP OVER ALL PLAYLIST AND REMOVE***			var _numCrrntLists:int = (xmlData..item.length() - 1) ;			for (var i:int = 0; i <= _numCrrntLists  ; i++) {				scene.removeChildByName("item" + i) ;				scene.removeChildByName("reflection" + i) ;			}			// Create 3D Gallery			create3DGallery();			//search3DGallery("Tribe") ;            			position = 1;					}						public function mySearchDown(e:Event):void {			position = 1;			search3DGallery(search.search_txt.text);			descBoardRollOver = true;			e.target.gotoAndPlay(2);					}						public function overSearch(e:Event):void {						descBoardRollOver = true;			//e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;					}				public function overBar(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;						TweenMax.to(close_mc, 1, {glowFilter:{color:0xEB2125, alpha:1, blurX:10, blurY:10}}); //0x91e600					}				public function outBar(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;			TweenMax.to(close_mc, 1, {glowFilter:{color:0xEB2125, alpha:0, blurX:10, blurY:10}}); //0x91e600		}				public function hideBar(e:Event):void {						close_mc.alpha = 1;			searchphile.visible = true;			searchphile_over.visible = false;			//searching.visible = false;			control();			searchcontrol();			create3DGallery();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			//trace("reset here") ;			resetList();			/*stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);			stage.addEventListener(MouseEvent.CLICK, stageUp);			stage.addEventListener(MouseEvent.CLICK, stageDown);*/					}				public function playVid():void {						//var url:String = getVideo();			//ns.play(url);						//addChild(myContent);			addChild(play_button);			//addChild(pause_button);			addChild(fullback);			//addChild(fullOver);			//addChild(volume);			addChild(mySlider);			addChild(pBar);			addChild(fullest);			addChild(fullestOver);			fullestOver.visible = false;			addChild(closeVid);			addChild(startVid);			addChild(startVidover);			addChild(replay);			addChild(pauseVid);			addChild(pauseVidover);			pauseVidover.visible = false;			addChild(fwdVid);			addChild(fwdVidover);			addChild(rwdVid);			addChild(rwdVidover);			addChild(paneOut);			addChild(paneOver);			paneOver.visible = false;			blackout.visible = true;						camera.zoom = 3.5;			viewport.alpha = .65;			vid.visible = true;			vidback.visible = true;			Tweener.addTween(vid,{alpha: 1, delay: 3, time: 0, transition: "Strong.easeOut"});			TweenMax.to(vidback, 1, {glowFilter:{color:0x666666, alpha:1, blurX:10, blurY:10}}); //0x91e600						searchphile.visible = true;			pBar.x =  stage.stageWidth/2 - 310;			pBar.y = stage.stageHeight/2 + 140;			pBar.width = 620;			pBar.height = 15;			pBar.alpha = 0.75;			/*pause_button.x = stage.stageWidth/2 - 18;			pause_button.y = stage.stageHeight/2 + 113;			pause_button.height = 33;			pause_button.width = 33;			pause_button.alpha = .7;			pause_button.buttonMode = true;			pause_button.visible = true;*/			play_button.x = stage.stageWidth/2 - 48;			play_button.y = stage.stageHeight/2 + 113;			play_button.height = 33;			play_button.width = 33;			play_button.alpha = .7;			play_button.visible = false;			trace("play_button.x = " +play_button.x);			trace("play_button.y = " +play_button.y);			trace("stage width = " +stage.stageWidth);			trace("stage height = " +stage.stageHeight);						/*volume.x = stage.stageWidth/2 + 145;			volume.y = stage.stageHeight/2 + 185;			volume.width = 90;			volume.height = 5;			volume.alpha = .2;			volume.buttonMode = true;			trace("volume.x = " +volume.x);			trace("volume.y = " +volume.y);			*/									mySlider.x = stage.stageWidth/2 + 120;			mySlider.y = stage.stageHeight/2 + 170;			mySlider.buttonMode = true;			trace("mySlider.x = " +mySlider.x);			trace("mySlider.y = " +mySlider.y);			fullest.x = stage.stageWidth/2 + 245;			fullest.y = stage.stageHeight/2 + 178.8;			fullest.buttonMode = true;			fullestOver.x = stage.stageWidth/2 + 245;			fullestOver.y = stage.stageHeight/2 + 178.8;			fullestOver.buttonMode = true;			trace("fullest.x = " +fullest.x);			trace("fullest.y = " +fullest.y);			var volbar = fullback;			volbar.x = stage.stageWidth/2 + 150;			volbar.y = stage.stageHeight/2 + 180;			trace("volbar.x = " +volbar.x);			trace("volbar.y = " +volbar.y);						rwdVid.x = stage.stageWidth/2 - 90;			rwdVid.y = stage.stageHeight/2 + 178.8;			rwdVidover.x = stage.stageWidth/2 - 90;			rwdVidover.y = stage.stageHeight/2 + 178.8;			rwdVidover.visible = false;			startVid.x = stage.stageWidth/2 - 45;			startVid.y = stage.stageHeight/2 + 178.8;			startVid.visible = false;			startVidover.x = stage.stageWidth/2 - 45;			startVidover.y = stage.stageHeight/2 + 178.8;			replay.x = stage.stageWidth/2 - 45;			replay.y = stage.stageHeight/2 + 178.8;			replay.visible = false;						pauseVid.x = stage.stageWidth/2;			pauseVid.y = stage.stageHeight/2 + 178.8;			pauseVidover.x = stage.stageWidth/2;			pauseVidover.y = stage.stageHeight/2 + 178.8;			fwdVid.x = stage.stageWidth/2 + 45; // -55			fwdVid.y = stage.stageHeight/2 + 178.8;			fwdVidover.x = stage.stageWidth/2 + 45; // -55			fwdVidover.y = stage.stageHeight/2 + 178.8;			fwdVidover.visible = false;			closeVid.x = stage.stageWidth/2 + 300;			closeVid.y = stage.stageHeight/2 + 180;			closeVid.buttonMode = true;			closeVid.visible = true;			trace("closeVid.x = " +closeVid.x);			trace("closeVid.y = " +closeVid.y);						/*fullOver.x = stage.stageWidth/2 + 140;			fullOver.y = stage.stageHeight/2 + 180;			*/			shortName.visible = true;			shortName.x = stage.stageWidth/2 - 210;			shortName.y = stage.stageHeight/2 + 212.5;						//shortDesc.visible = true;			//shortDesc.x = stage.stageWidth/2 - 285;			//shortDesc.y = stage.stageHeight/2 + 125;						paneOut.x = stage.stageWidth/2 - 290;			paneOut.y = stage.stageHeight/2 +178.8;			paneOver.x = stage.stageWidth/2 - 290;			paneOver.y = stage.stageHeight/2 +178.8;			understand.x = stage.stageWidth/2 - 209;			understand.y = stage.stageHeight/2 + 178.8;			understand.alpha = 0;			returnvideo.x = stage.stageWidth/2 - 209;			returnvideo.y = stage.stageHeight/2 + 178.8;			returnvideo.alpha = 0;			replay.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			replay.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			replay.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			replay.addEventListener(MouseEvent.MOUSE_OVER, downwardDog);			replay.addEventListener(MouseEvent.CLICK, buttonClickHandler);						myDesc.x = stage.stageWidth/2 - 305;			myDesc.y = stage.stageHeight/2 - 140;			myDesc.maxChars = 10;			shortDesc.x = stage.stageWidth/2 - 380;			shortDesc.y = stage.stageHeight/2 - 221;						pBar.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			pBar.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			pBar.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			/*pause_button.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			pause_button.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			pause_button.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			pause_button.addEventListener(MouseEvent.CLICK, buttonClickHandler);*/			play_button.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			play_button.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			play_button.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			play_button.addEventListener(MouseEvent.CLICK, buttonClickHandler);			mySlider.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			mySlider.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			mySlider.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			volume.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			volume.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			volume.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			fullest.addEventListener(MouseEvent.MOUSE_OVER, fsOver);			fullestOver.addEventListener(MouseEvent.MOUSE_OUT, fsOut);			fullestOver.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			fullestOver.addEventListener(MouseEvent.CLICK, goFull);			closeVid.addEventListener(MouseEvent.MOUSE_OVER, closeVidover);			closeVid.addEventListener(MouseEvent.MOUSE_OUT, closeVidout);			//closeVid.addEventListener(MouseEvent.MOUSE_DOWN, closeUp);			closeVid.addEventListener(MouseEvent.CLICK, buttonClickHandler);			closeVid.stop();			volbar.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			volbar.addEventListener(MouseEvent.MOUSE_UP, descBoardOut);			volbar.addEventListener(MouseEvent.MOUSE_UP, downwardDog);						rwdVidover.addEventListener(MouseEvent.MOUSE_OUT, rwdOut);			rwdVid.addEventListener(MouseEvent.MOUSE_OVER, rwdOver);			rwdVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			rwdVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			rwdVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						fwdVidover.addEventListener(MouseEvent.MOUSE_OUT, fwdOut);			fwdVid.addEventListener(MouseEvent.MOUSE_OVER, fwdOver);			fwdVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			fwdVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			fwdVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);			pauseVidover.addEventListener(MouseEvent.MOUSE_OUT, pOut);			pauseVid.addEventListener(MouseEvent.MOUSE_OVER, pOver);			pauseVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			pauseVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			pauseVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						paneOut.addEventListener(MouseEvent.MOUSE_OVER, swapOver);			paneOut.addEventListener(MouseEvent.MOUSE_OUT, swapOut);			paneOut.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			paneOut.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			paneOut.addEventListener(MouseEvent.CLICK, showData);						paneOver.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			paneOver.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			paneOver.addEventListener(MouseEvent.MOUSE_OUT, vOut);			paneOver.addEventListener(MouseEvent.MOUSE_OVER, vOver);			paneOver.addEventListener(MouseEvent.CLICK, returnData);						paneOver.visible = false;						/*Tweener.addTween(myContent, {alpha:1, y: myContent.y-80, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(pause_button, {alpha:.7, y: pause_button.y-78, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(mySlider, {alpha:.85, y: mySlider.y-81, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(pBar, {alpha:.7, y: pBar.y-90, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(volume, {alpha:.2, y: volume.y-75, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(fullest, {alpha:.4, y: fullest.y-170, time:1.5, transition: "easeInOutElastic", delay: .5});			Tweener.addTween(fullback, {alpha:.35, y: fullback.y-83, time:1.5, transition: "easeInOutElastic", delay: .5});*/						// Configure the various Button instances. Each Button instance uses 			// the same click handler.			//play_button.addEventListener(MouseEvent.CLICK, buttonClickHandler);			//pause_button.addEventListener(MouseEvent.CLICK, buttonClickHandler);			//fullest.addEventListener(MouseEvent.CLICK, goFull);		}				public function removeVid():void {						removeChild(play_button);			//removeChild(pause_button);			removeChild(fullback);			//removeChild(fullOver);			//removeChild(volume);			removeChild(mySlider);			removeChild(pBar);			removeChild(fullest);			removeChild(fullestOver);			removeChild(startVid);			removeChild(startVidover);			removeChild(replay);			removeChild(pauseVid);			removeChild(pauseVidover);			removeChild(fwdVid);			removeChild(fwdVidover);			removeChild(rwdVid);			removeChild(rwdVidover);			removeChild(paneOut);			removeChild(paneOver);			blackout.visible = false;			removeChild(closeVid);					}						public function stopVidrollover():void {						startVidover.removeEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			startVidover.removeEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			startVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			startVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			startVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						startVidover.addEventListener(MouseEvent.MOUSE_OUT, startVidOut);			startVid.addEventListener(MouseEvent.MOUSE_OVER, startOver);			startVidover.visible = false;			startVid.visible = true;						pauseVidover.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			pauseVidover.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			pauseVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			pauseVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			pauseVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						pauseVidover.removeEventListener(MouseEvent.MOUSE_OUT, pOut);			pauseVid.removeEventListener(MouseEvent.MOUSE_OVER, pOver);			pauseVidover.visible = true;			pauseVid.visible = false;							}				public function startVidrollover():void {						startVidover.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			startVidover.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			startVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			startVidover.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			startVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						startVidover.removeEventListener(MouseEvent.MOUSE_OUT, startVidOut);			startVid.removeEventListener(MouseEvent.MOUSE_OVER, startOver);			startVidover.visible = true;			startVid.visible = false;						pauseVidover.removeEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			pauseVidover.removeEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			pauseVidover.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			pauseVidover.addEventListener(MouseEvent.CLICK, buttonClickHandler);						pauseVidover.addEventListener(MouseEvent.MOUSE_OUT, pOut);			pauseVid.addEventListener(MouseEvent.MOUSE_OVER, pOver);			pauseVidover.visible = false;			pauseVid.visible = true;					}						public function goFull(e:Event):void {						stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			stage.removeEventListener(MouseEvent.CLICK, stageUp);			stage.removeEventListener(MouseEvent.CLICK, stageDown);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, setFullScreen);						if (stage.displayState== "normal") {				stage.displayState="fullScreen";				//stage.scaleMode = StageScaleMode.NO_SCALE;				} else {				stage.displayState="normal";			}					}				public function setFullScreen(event:FullScreenEvent):void {			if (event.fullScreen) {				vid.width = stage.stageWidth;				vid.height = stage.stageHeight;				vid.x = 0;				vid.y = 0;				removeVid();				closeVid.visible = false;			} else {				vid.width = 620;				vid.height = 349;				playVid();				control();				backward.visible = true;				forward.visible = true;				closeVid.visible = true;			}		}				public function buttonClickHandler(event:MouseEvent):void {									// Use a switch statement to determine which button was clicked.			switch (event.currentTarget) {				case play_button :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					ns.resume();					break;				case startVidover :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					ns.resume();					startVidrollover();					break;				case replay :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					//ns.resume();					displayItem(currentItem);					startVidrollover();					break;				case pauseVidover :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					ns.togglePause();					startVidover.visible = true;					stopVidrollover();					break;				case rwdVidover :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					//ns.resume();					ns.seek(ns.time - 5)					break;				case fwdVidover :					// If the play button was clicked, resume the video playback. 					// If the video was already playing, this has no effect.					ns.seek(ns.time + 5)					break;				case closeVid :					setupStageMouseUp();					setupStageMouseDown();					closeUp();					break;			}		}				public function videoStatusEvent(statusObject:Object):void{			if(statusObject.info.code=="NetStream.Play.Stop") {								ns.resume();				if (currentItem < TOTAL - 1) displayItem(++currentItem);				trace("the video has stopped");				replayVid();				itemSelected = false;							}		}				public function replayVid():void {						replay.visible = true;			startVid.visible = false;					}				public function closeVidover(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				TweenMax.to(closeVid, 1, {glowFilter:{color:0xEB2125, alpha:1, blurX:30, blurY:30}}); //0x91e600						}					}				public function closeVidout(e:Event):void {						TweenMax.to(closeVid, 1, {glowFilter:{color:0xEB2125, alpha:0, blurX:30, blurY:30}}); //0x91e600			descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function startOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				startVid.visible = false;				startVidover.visible = true;							}						}				public function swapOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			understand.visible = false;			Tweener.addTween(understand, {alpha:0, time:.5, transition: "easeOutQuint"});			Tweener.addTween(shortName, {alpha:1, time:.5, transition: "easeOutQuint"});							stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}		public function swapOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				understand.visible = true;				Tweener.addTween(understand, {alpha:1, time:.5, transition: "easeOutQuint"});				Tweener.addTween(shortName, {alpha:0, time:.5, transition: "easeOutQuint"});							}						}						public function vOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			returnvideo.visible = false;			Tweener.addTween(returnvideo, {alpha:0, time:.5, transition: "easeOutQuint"});			Tweener.addTween(shortName, {alpha:1, time:.5, transition: "easeOutQuint"});							stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);					}		public function vOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				returnvideo.visible = true;				Tweener.addTween(returnvideo, {alpha:1, time:.5, transition: "easeOutQuint"});				Tweener.addTween(shortName, {alpha:0, time:.5, transition: "easeOutQuint"});							}						}				public function startVidOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			startVidover.visible = false;			startVid.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function pOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				pauseVid.visible = false;				pauseVidover.visible = true;							}						}				public function pOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			pauseVidover.visible = false;			pauseVid.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function rwdOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				rwdVid.visible = false;				rwdVidover.visible = true;							}						}				public function rwdOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			rwdVidover.visible = false;			rwdVid.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function fwdOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				fwdVid.visible = false;				fwdVidover.visible = true;							}						}				public function fwdOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			fwdVidover.visible = false;			fwdVid.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}						public function fsOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				fullest.visible = false;				fullestOver.visible = true;							}						}				public function fsOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			fullestOver.visible = false;			fullest.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function wOver(e:Event):void {						if (!openMode) {								Mouse.show();				handMode.visible = false;				paneOut.visible = false;				paneOver.visible = true;							}						}				public function wOut(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = true;			paneOver.visible = false;			paneOut.visible = true;			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				public function showData(e:Event):void {						myDesc.visible = true;			paneOut.visible = false;			paneOver.visible = true;			shortDesc.visible = true;			shortDesc.album.visible = true;						Tweener.addTween(myDesc, {alpha:1, time:2, transition: "easeOutQuint"});			Tweener.addTween(shortDesc, {alpha:1, time:2, transition: "easeOutQuint"});			Tweener.addTween(vid, {alpha:0, time:2, transition: "easeOutQuint"});			//Tweener.addTween(vidback, {alpha:0, time:2, transition: "easeOutQuint"});						/*Tweener.addTween(extension, {x: extension.x + 308, alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			TweenMax.to(descBoard, 1, {glowFilter:{color:0xCCCCCC, alpha:1, blurX:30, blurY:30}}); //0x91e600			TweenMax.to(descBoard, 0.5, {blurFilter:{blurX:20, remove:true}, ease:Bounce.easeInOut});			TweenLite.to(descBoard, 2, {visible:true});			Tweener.addTween([currentPlane, currentPlane.extra.reflection],{ z:0, time:1 });			Tweener.addTween(descBoard.shady,{alpha: 1, delay: .5, time: 2, transition: "Strong.easeOut"});			TweenLite.to(descBoard.shady, 1, {transformAroundCenter:{scaleX:1, scaleY:1}, ease:Expo.easeInOut});			TweenLite.to(descBoard.close_button, 1, {transformAroundCenter:{scaleX:1, scaleY:1}, delay: 1.2, ease:Expo.easeInOut});			Tweener.addTween(descBoard.close_button,{alpha: 1, time: 1, transition: "Strong.easeOut"});*/								}				public function returnData(e:Event):void {						myDesc.visible = false;			paneOut.visible = true;			paneOver.visible = false;			shortDesc.visible = false;			shortDesc.album.visible = false;						Tweener.addTween(myDesc, {alpha:0, time:2, transition: "easeOutQuint"});			Tweener.addTween(shortDesc, {alpha:0, time:2, transition: "easeOutQuint"});			Tweener.addTween(vid, {alpha:1, time:2, transition: "easeOutQuint"});			//Tweener.addTween(vidback, {alpha:0, time:2, transition: "easeOutQuint"});						/*Tweener.addTween(extension, {x: extension.x + 308, alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			TweenMax.to(descBoard, 1, {glowFilter:{color:0xCCCCCC, alpha:1, blurX:30, blurY:30}}); //0x91e600			TweenMax.to(descBoard, 0.5, {blurFilter:{blurX:20, remove:true}, ease:Bounce.easeInOut});			TweenLite.to(descBoard, 2, {visible:true});			Tweener.addTween([currentPlane, currentPlane.extra.reflection],{ z:0, time:1 });			Tweener.addTween(descBoard.shady,{alpha: 1, delay: .5, time: 2, transition: "Strong.easeOut"});			TweenLite.to(descBoard.shady, 1, {transformAroundCenter:{scaleX:1, scaleY:1}, ease:Expo.easeInOut});			TweenLite.to(descBoard.close_button, 1, {transformAroundCenter:{scaleX:1, scaleY:1}, delay: 1.2, ease:Expo.easeInOut});			Tweener.addTween(descBoard.close_button,{alpha: 1, time: 1, transition: "Strong.easeOut"});*/								}						public function myOver(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;					}				public function myOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;					}				public function scrolling(e:Event):void {						descBoardRollOver = true;			e.target.gotoAndPlay(2);			Mouse.show();			handMode.visible = false;					}				public function scrollOut(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);			Mouse.hide();			handMode.visible = true;					}						//_____________________________________________ PLANE INTERACTIVE				private function onItemRelease(e:InteractiveScene3DEvent):void		{			var p:Plane = e.target as Plane;			// Display item			if (currentItem != p.extra.index)			{				currentItem = p.extra.index;				displayItem(currentItem);			}			// Or bring back			else			{				currentItem = -1;				itemSelected = false;				for (var i:uint = 0; i < TOTAL; i++)				{					p = scene.getChildByName("item" + i) as Plane;					Tweener.addTween([p, p.extra.reflection],							{	z:0, 								time:2,								onUpdate:function():void										{											// Render 3D											renderer.renderScene(scene, camera, viewport);										}							});				}				setUpMouseMove();				// Hide category board				Tweener.addTween(descBoard,									{	alpha:0, 									x: descBoard.x+550,									time:1,									onUpdate:function():void									{										descBoard.visible = false;									}										});				}						descBoard.title.visible = true;			descBoard.title.alpha = 1;			descBoard.album.visible = true;			descBoard.album.alpha = 1;			descBoard.recording.visible = true;			descBoard.recording.alpha = 1;			descBoard.shady.alpha = 1;					}				private function onItemRollOver(e:InteractiveScene3DEvent):void		{			if (!openMode)			{				handMode.visible = false;				Mouse.show();			}			itemRollOver = true;					}				private function onItemRollOut(e:InteractiveScene3DEvent):void		{			if (!openMode)			{				handMode.visible = true;				Mouse.hide();			}			itemRollOver = false;		}				public function arrowDisplay():void {						for (var i:uint = 0; i < TOTAL; i++) {								if (currentItem == TOTAL-1) {										forward.visible = false;					Tweener.addTween(forward, {alpha: 0, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});									}else{										forward.visible = true;					Tweener.addTween(forward, {alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});									}								if (currentItem == 0) {										backward.visible = false;					Tweener.addTween(backward, {alpha: 0, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});									}else{										backward.visible = true;					Tweener.addTween(backward, {alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});									}			}						trace("total:" +TOTAL);			trace("current item is:" +currentItem);					}				private function displayItem(index:Number):void		{			playVid();			arrowDisplay();						Tweener.addTween(forward, {y: stage.stageHeight-50, alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			Tweener.addTween(backward, {y: stage.stageHeight-50, alpha: 1, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});						var p:Plane = scene.getChildByName("item" + index) as Plane;			currentPlane = p;			/*			BitmapMaterial(currentPlane.material).precise = planePrecise;			BitmapMaterial(currentPlane.material).smooth = planeSmooth;			*/			itemSelected = true;			// Display new item information			descBoard.alpha = 1;			descBoard.visible = true;			descBoard.x = stage.stageWidth / 2 + 224; //stage.stageWidth / 2 + 80			descBoard.y = stage.stageHeight / 2 + 2; //stage.stageHeight / 2 - 55			//descBoard.x = stage.stageWidth / 2 + 200; old version			//descBoard.y = stage.stageHeight / 2 - 35; old version			descBoard.width = 6;			descBoard.height = 3.5;						descBoard.shady.alpha = 1;			descBoard.shady.width = 0;			descBoard.shady.height = 0;			descBoard.shady.visible = false;						descBoard.grunge.alpha = 0;			descBoard.grunge.width = 0;			descBoard.grunge.height = 0;						descBoard.graphix.alpha = 0;			descBoard.graphix.width = 0;			descBoard.graphix.height = 0;			descBoard.graphix.addEventListener(MouseEvent.MOUSE_OVER, myOver);			descBoard.graphix.addEventListener(MouseEvent.MOUSE_OUT, myOut);						descBoard.panels.alpha = 0;			descBoard.panels.width = 0;			descBoard.panels.height = 0;						descBoard.title.text = items[index].title;			shortName.title.text = items[index].title;			shortName.title.visible = true;						myDesc.text = items[index].promo;			myDesc.maxChars = 10;			shortDesc.album.text = items[index].title;						//shortDesc.album.visible = true;			shortName.title.alpha = 1;			//shortDesc.album.alpha = 1;						//trace("Album.x: " +shortDesc.album.x);			//trace("Album.y: " +shortDesc.album.y);			trace("Title.x: " +shortName.title.x);			trace("Title.y: " +shortName.title.y);						//descBoard.desc_mc.scroll_txt.visible = false;			//descBoard.desc_mc.scroll_txt.text =  items[index].caption;			//descBoard.desc_mc = items[index].caption;						/*var str:String = String(items[index].caption);			var mLoader:Loader = new Loader();			var mRequest:URLRequest = new URLRequest(str);			mLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCompleteHandler);			mLoader.load(mRequest);						trace(mRequest);			*/			//descBoard.album.text = items[index].promo;			//descBoard.recording.text = items[index].recording;			var str:String = new String;			str = items[currentItem].caption;			ns.play(str);			trace("1." +items[currentItem].title);			trace("2." +items[currentItem].caption);						/*descBoard.desc_mc.visible = true;			descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.CLICK, downwardDog);			descBoard.desc_mc.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.desc_mc.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.desc_mc.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.desc_mc.addEventListener(MouseEvent.CLICK, downwardDog);*/			descBoard.shady.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.shady.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.shady.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.shady.addEventListener(MouseEvent.CLICK, downwardDog);			descBoard.graphix.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.graphix.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.graphix.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.graphix.addEventListener(MouseEvent.CLICK, downwardDog);			descBoard.tt_left.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.tt_left.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.tt_left.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.tt_left.addEventListener(MouseEvent.CLICK, downwardDog);			descBoard.tt_right.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			descBoard.tt_right.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			descBoard.tt_right.addEventListener(MouseEvent.MOUSE_OUT, downwardDog);			descBoard.tt_right.addEventListener(MouseEvent.CLICK, downwardDog);									descBoard.tt_left.alpha = 0;			//descBoard.tt_left.visible = false;			descBoard.tt_left.width = 0;			descBoard.tt_left.height = 0;			//descBoard.tt_left.addEventListener(MouseEvent.MOUSE_OVER, myOver);			//descBoard.tt_left.addEventListener(MouseEvent.MOUSE_OUT, myOut);						descBoard.tt_right.alpha = 0;			//descBoard.tt_right.visible = false;			descBoard.tt_right.width = 0;			descBoard.tt_right.height = 0;			//descBoard.tt_right.addEventListener(MouseEvent.MOUSE_OVER, myOver);			//descBoard.tt_right.addEventListener(MouseEvent.MOUSE_OUT, myOut);									//close button			descBoard.close_button.addEventListener( MouseEvent.CLICK, closeUp );			descBoard.close_button.buttonMode = true;			descBoard.close_button.mouseChildren = false;			descBoard.close_button.gotoAndStop("up");			//descBoard.close_button.stop();			descBoard.close_button.addEventListener(MouseEvent.MOUSE_OVER, closeOver);			descBoard.close_button.addEventListener( MouseEvent.MOUSE_OUT, closeOut );			descBoard.close_button.alpha = 1;			descBoard.Previous.alpha = 0;			descBoard.Next.alpha = 0;			descBoard.fullVideo.alpha = 0;			/*descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.MOUSE_DOWN, scrolling);			descBoard.desc_mc.drag_mc.addEventListener(MouseEvent.MOUSE_UP, scrollOut);			*/						descBoard.alpha = 1;			descBoard.visible = true;								Tweener.addTween(descBoard,	{	alpha:1, time:2});			// Bring selected plant to front			Tweener.addTween([currentPlane, currentPlane.extra.reflection],								{	z:0, 									time:1 								});														// Bring Back other item			for (var i:uint = 0; i < TOTAL; i++)				if (i != index)				{					var p1:Plane = scene.getChildByName("item" + i) as Plane;					Tweener.addTween([p1, p1.extra.reflection],										{	z:500,											time:1,											onUpdate:function():void											{												renderer.renderScene(scene, camera, viewport);													}										});					}							// remove camera rotation --> this is where the camera on selection does its behavior			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			Tweener.addTween(camera,{	rotationX: 0,										rotationY: itemAngle,										x:p.x+130,										z:-500,										y:0,										time:2,										onUpdate:function():void										{											// Render 3D											renderer.renderScene(scene, camera, viewport);																					}									});					}				public function controlMenu():void {						//controls			addChild(search);			search.x = stage.stageWidth/2;			search.y = stage.stageHeight + 160;			search.addEventListener(MouseEvent.MOUSE_OVER, overSearch);							addChild(_searchOut);			_searchOut.x = stage.stageWidth/2 + 120;			_searchOut.y = stage.stageHeight + 160;			_searchOut.alpha = 0;			_searchOut.visible = false;			_searchOut.addEventListener(MouseEvent.MOUSE_OVER, mySearchOver);			_searchOut.addEventListener(MouseEvent.MOUSE_DOWN, mySearchDown);			_searchOut.addEventListener(MouseEvent.MOUSE_OUT, mySearchOut);						addChild(close_mc);			close_mc.x = stage.stageWidth/2 - 130;			close_mc.y = stage.stageHeight + 60;			close_mc.alpha = 1;			close_mc.visible = false;							addChild(_controlp);			_controlp.x = stage.stageWidth/2;			_controlp.y = stage.stageHeight + 160;			_controlp.addEventListener(MouseEvent.MOUSE_OVER, overSearch);			//_controlp.addEventListener(MouseEvent.MOUSE_OUT, outSearch);										/*addChild(helphile);			helphile.x = stage.stageWidth/2 + 120 //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile.y = stage.stageHeight+300;			helphile.buttonMode = true;			helphile.mouseChildren = false;			//helphile.addEventListener(MouseEvent.MOUSE_OVER, helpOver);			//helphile.addEventListener(MouseEvent.MOUSE_OUT, helpOut);			*/							addChild(helphile);			helphile.x = stage.stageWidth/2 + 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile.y = stage.stageHeight+300;			helphile.buttonMode = true;			helphile.mouseChildren = false;			helphile.addEventListener(MouseEvent.MOUSE_OVER, helpOver);						addChild(helphile_over);			helphile_over.visible = false;			helphile_over.x = stage.stageWidth/2 + 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile_over.y = stage.stageHeight+300;			helphile_over.buttonMode = true;			helphile_over.mouseChildren = false;			helphile_over.addEventListener(MouseEvent.MOUSE_OUT, helpOut);			helphile_over.addEventListener(MouseEvent.CLICK, help_page);						addChild(audiophile);			audiophile.x = stage.stageWidth/2 - 116; //+70			audiophile.y = stage.stageHeight+300;			audiophile.buttonMode = true;			audiophile.mouseChildren = false;			audiophile.addEventListener(MouseEvent.MOUSE_OVER, audioOver);							addChild(audiophile_over);			audiophile_over.visible = false;			audiophile_over.x = stage.stageWidth/2 - 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			audiophile_over.y = stage.stageHeight+300;			audiophile_over.buttonMode = true;			audiophile_over.mouseChildren = false;			audiophile_over.addEventListener(MouseEvent.MOUSE_OUT, audioOut);			audiophile_over.addEventListener(MouseEvent.CLICK, audio_page);						addChild(videophile_over);			videophile_over.visible = true;			videophile_over.x = stage.stageWidth/2 - 58; //+ 140(stage.stageWidth/2)+(stage.stageWidth/2*.97);			videophile_over.y = stage.stageHeight+300;			videophile_over.buttonMode = true;			videophile_over.mouseChildren = false;			videophile_over.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			videophile_over.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			videophile_over.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			videophile_over.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			videophile_over.addEventListener(MouseEvent.CLICK, downwardDog);						addChild(searchphile);			searchphile.x = stage.stageWidth/2 + 58; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			searchphile.y = stage.stageHeight+300;			searchphile.buttonMode = true;			searchphile.mouseChildren = false;			searchphile.addEventListener(MouseEvent.MOUSE_OVER, searchOver);							addChild(searchphile_over);			searchphile_over.visible = false;			searchphile_over.x = stage.stageWidth/2 + 58; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			searchphile_over.y = stage.stageHeight+300;			searchphile_over.buttonMode = true;			searchphile_over.mouseChildren = false;			searchphile_over.addEventListener(MouseEvent.MOUSE_OUT, searchOut);			searchphile_over.addEventListener(MouseEvent.CLICK, searchMc);						addChild(uploadphile);			uploadphile.x = stage.stageWidth/2; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			uploadphile.y = stage.stageHeight+300;			uploadphile.buttonMode = true;			uploadphile.mouseChildren = false;			uploadphile.addEventListener(MouseEvent.MOUSE_OVER, uploadOver);							addChild(uploadphile_over);			uploadphile_over.visible = false;			uploadphile_over.x = stage.stageWidth/2; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			uploadphile_over.y = stage.stageHeight+300;			uploadphile_over.buttonMode = true;			uploadphile_over.mouseChildren = false;			uploadphile_over.addEventListener(MouseEvent.MOUSE_OUT, uploadOut);			uploadphile_over.addEventListener(MouseEvent.CLICK, upload_page);						addChild(backward);			backward.alpha = 0;			backward.x = stage.stageWidth/2-191; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			backward.y = stage.stageHeight-50;			backward.buttonMode = true;			backward.mouseChildren = false;			backward.addEventListener(MouseEvent.MOUSE_OVER, backOver);			backward.addEventListener(MouseEvent.MOUSE_OUT, backOut);			backward.addEventListener(MouseEvent.CLICK, PreviousItem);						addChild(forward);			forward.alpha = 0;			forward.x = stage.stageWidth/2+191; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			forward.y = stage.stageHeight-50;			forward.buttonMode = true;			forward.mouseChildren = false;			forward.addEventListener(MouseEvent.MOUSE_OVER, forwardOver);			forward.addEventListener(MouseEvent.MOUSE_OUT, forwardOut);			forward.addEventListener(MouseEvent.CLICK, NextItem);						}				private function downwardDog(e:Event):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, stageUp);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, stageDown);			stage.removeEventListener(MouseEvent.CLICK, stageUp);			stage.removeEventListener(MouseEvent.CLICK, stageDown);					}				private function downwardOut(e:Event):void		{			if (!openMode)			{				Mouse.hide();				handMode.visible = true;			}		}						public function stopVideo(e:Event):void {						descBoardRollOver = false;			e.target.gotoAndPlay(21);		}				//________________________________________________ OPEN EFFECT				private function openEffect():void		{			// Category board			addChild(descBoard);			descBoard.x = stage.stageWidth / 2+250;			descBoard.y = stage.stageHeight / 2-10;			descBoard.visible = false;						addChild(blackout);			addChild(extension);			extension.visible = false;			extension.x = stage.stageWidth/2 + 165;//473 is the end point, 165 is the starting point			extension.y = stage.stageHeight/2;						addChild(vidback);			vidback.visible = false;			vidback.x = stage.stageWidth/2;			vidback.y = stage.stageHeight/2;			vidback.addEventListener(MouseEvent.MOUSE_OVER, descBoardOver);			vidback.addEventListener(MouseEvent.MOUSE_OUT, descBoardOut);			vidback.addEventListener(MouseEvent.MOUSE_DOWN, downwardDog);			vidback.addEventListener(MouseEvent.MOUSE_UP, downwardDog);			vidback.addEventListener(MouseEvent.CLICK, downwardDog);						addChild(shortName);			shortName.visible = false;			shortName.title.visible = false;						addChild(understand);			understand.visible = false;						addChild(returnvideo);			returnvideo.visible = false;									addChild(myDesc);			myDesc.visible = false;						addChild(shortDesc);			shortDesc.visible = false;			shortDesc.album.visible = false;						cameraCenter =  (TOTAL - 1) * itemDistance / 2;			var action:Object = {		rotationY:40,										x:(TOTAL - 1) * itemDistance,										time:3,										transition:"easeInQuint",										onUpdate:function():void										{											// Render 3D											renderer.renderScene(scene, camera, viewport);																					},										onComplete:function():void										{											demoEnded = true;											Tweener.addTween(camera,{	x:cameraCenter,																		rotationY:0,																		time:3,																		onUpdate:function():void																		{																			// Render 3D																			renderer.renderScene(scene, camera, viewport);																													},																		onComplete:function():void																		{																			setUpMouseMove();																		}																	}); 										}							}				Tweener.addTween(camera, action);		}				//_________________________________________________ SET UP MOUSE MOVE HANDLER				private function setUpMouseMove():void		{			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);		}				public function closeUp():void {						ns.close();			descBoardRollOver = false;			removeVid();			closepanel();			removeChild(blackout);			handMode = hand;			setUpMouseMove();			shortDesc.visible = false;						if (!itemRollOver) {				trace("1. item rollover is false");			}						if (displayItem) {				trace("2. display item is true");			}						if (!descBoardRollOver) {				trace("3. descboard rollover is false");			}						if (demoEnded) {				trace("4. demo ended is true");			}						if (!itemSelected) {				trace("5. item selected is false");			}						if (!openMode) {				trace("6. open mode is false");			}					}				public function closepanel():void {						Tweener.addTween(forward, {alpha: 0, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});			Tweener.addTween(backward, {alpha: 0, time: 1, delay: 0.25, transition: "Elastic.easeInOut"});						descBoard.visible = false;			ns.close();			vid.visible = false;			vidback.visible = false;			blackout.visible = false;			camera.zoom = cameraZoom;			viewport.alpha = 1;			closeVid.visible = false;			shortName.visible = false;			myDesc.visible = false;			//itemRollOver = false;								}				public function closeOver(e:Event):void {						TweenMax.to(descBoard.close_button, 1, {glowFilter:{color:0xEB2125, alpha:1, blurX:30, blurY:30}}); //0x91e600								}				public function closeOut(e:Event):void {						TweenMax.to(descBoard.close_button, 1, {glowFilter:{color:0xEB2125, alpha:0, blurX:30, blurY:30}}); //0x91e600								}				public function resetList():void {						trace('resetList') ;						if (search.search_txt.length > 0) { //if( textField.text.length > 0 )							create3DGallery();				position = 1;						}						//***LOOP OVER ALL PLAYLIST AND REMOVE***				var _numCrrntLists:int = (xmlData..item.length() - 1) ;				for (var i:int = 0; i <= _numCrrntLists  ; i++) {					scene.removeChildByName("item" + i) ;					scene.removeChildByName("reflection" + i) ;				}								_numCrrntLists = meta5Search.getCollection().length ;				for (i = 0; i <= _numCrrntLists  ; i++) {					scene.removeChildByName("item" + i) ;					scene.removeChildByName("reflection" + i) ;				}												// Create 3D Gallery				create3DGallery();				position = 1;					}				private function mouseMoveHandler(e:Event):void		{			var deltaY:Number = (stage.mouseX - stage.stageWidth * .5) / CAMDELTA;			//var deltaX:Number = -(stage.mouseY - stage.stageHeight * .5) / CAMDELTA;			Tweener.addTween(camera,{	rotationY: deltaY,										time:1,										onUpdate:function():void										{											// Render 3D											renderer.renderScene(scene, camera, viewport);																					}									});		}						// Mouse DOWN on stage		private function setupStageMouseDown():void		{			stage.addEventListener(MouseEvent.MOUSE_DOWN, stageDown);		}				// Mouse UP on stage		private function setupStageMouseUp():void		{			stage.addEventListener(MouseEvent.MOUSE_UP, stageUp);		}				private function stageDown(e:Event):void		{			if (displayItem && !itemSelected && !itemRollOver)			{				handMode = handDrag;				handMode.visible = true;				hand.visible = false;				handMode.x = mouseX;					handMode.y = mouseY;				dragMode = true;				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			}		}				private function stageUp(e:Event):void		{			dragMode = false;			removeEventListener(Event.ENTER_FRAME, easingDrag);			if (!itemRollOver && !itemSelected)			{								handMode = hand;				handMode.visible = true;				handDrag.visible = false;				handMode.x = mouseX;					handMode.y = mouseY;				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			}			// Bring camera to original position			if (!itemRollOver && itemSelected)			{				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);				itemSelected = false;				for (var i:uint = 0; i < TOTAL; i++)				{					var p:Plane = scene.getChildByName("item" + i) as Plane;					Tweener.addTween([p, p.extra.reflection],							{	z:0, 								time:2,								onUpdate:function():void										{											// Render 3D											renderer.renderScene(scene, camera, viewport);										}							});				}				setUpMouseMove();				// Hide category board				Tweener.addTween(descBoard,									{	alpha:0, 									time:1,									onUpdate:function():void									{										descBoard.visible = false;									}										});							}								}				//__________________________________________ LOADING PROGRESS ( FULL VERSION )				private function startPreloading(e:Event):void		{			// Easing preloading update data			addEventListener(Event.ENTER_FRAME, progressUpdate);		}				private function progressUpdate(e:Event):void		{			preloaderEach.progressBar.width += (bytesLoaded / bytesTotal * stage.stageWidth - preloaderEach.progressBar.width) * 0.1;			if (preloaderEach.progressBar.width / stage.stageWidth >= 0.99) fullLoaded();			}				private function progressData(e:Event):void		{			bytesLoaded = e.target.bytesLoaded;			bytesTotal = e.target.bytesTotal;		}				//__________________________________________ VIDEO LOADED READY				private function ready(e:Event):void		{					}				//__________________________________________ APPLY STYLE SHEET					private function initStyleSheet():void		{			// load external css			var req:URLRequest = new URLRequest(css_path);			var loader:URLLoader = new URLLoader();			loader.load(req);			loader.addEventListener(Event.COMPLETE, cssLoaded);			// Adding text link event			//addEventListener(TextEvent.LINK, clickText);		}				private function clickText(li:TextEvent):void		{			var myURL:URLRequest = new URLRequest(li.text);			navigateToURL(myURL,"_blank");		}					private function cssLoaded(e:Event):void		{			css.parseCSS(e.target.data);			//descBoard.desc_mc.styleSheet = css;		}				//__________________________________________ MOUSE MOVE WITH HAND CURSOR				private function mouseMove(e:MouseEvent):void		{			if (dragMode) 			{				targetX = (mouseX - stage.stageWidth / 2) * dragSpeed;				addEventListener(Event.ENTER_FRAME, easingDrag, false, 0, true);			}			handMode.x = mouseX;				handMode.y = mouseY;		}				private function easingDrag(e:Event):void		{			camera.x += targetX;			camera.x = (camera.x < 0) ? 0 : camera.x;			camera.x = (camera.x > maxX) ? maxX : camera.x;			renderer.renderScene(scene, camera, viewport);			}				//__________________________________________ REPOSITION				private function rePosition(e:Event):void		{			preloaderEach.progressBar.width = preloaderEach.backPreloader.width = stage.stageWidth;						descBoard.x = stage.stageWidth/2 + 185; //(descBoard.stage.stageWidth / 2) + (stage.stageWidth/2*.32);			helphile_selected.x = stage.stageWidth/2 + 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile_selected.y = stage.stageHeight-50;			audiophile.x = stage.stageWidth/2 - 116; //+70			audiophile.y = stage.stageHeight-50;			audiophile_over.x = stage.stageWidth/2 - 116; //+70			audiophile_over.y = stage.stageHeight-50;			videophile.x = stage.stageWidth/2 - 58; // + 140 (stage.stageWidth/2)+(stage.stageWidth/2*.97);			videophile.y = stage.stageHeight-50;			videophile_over.x = stage.stageWidth/2 - 58; // + 140 (stage.stageWidth/2)+(stage.stageWidth/2*.97);			videophile_over.y = stage.stageHeight-50;			searchphile.x = stage.stageWidth/2 + 58; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			searchphile.y = stage.stageHeight-50;			searchphile_over.x = stage.stageWidth/2 + 58; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			searchphile_over.y = stage.stageHeight-50;			uploadphile.x = stage.stageWidth/2; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			uploadphile.y = stage.stageHeight-50;			uploadphile_over.x = stage.stageWidth/2; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			uploadphile_over.y = stage.stageHeight-50;			helphile.x = stage.stageWidth/2 + 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile.y = stage.stageHeight-50;			helphile_over.x = stage.stageWidth/2 + 116; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			helphile_over.y = stage.stageHeight-50;			_controlp.x = stage.stageWidth/2;			_controlp.y = stage.stageHeight - 50;			backward.x = stage.stageWidth/2-191; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			backward.y = stage.stageHeight-50;			forward.x = stage.stageWidth/2+191; //(stage.stageWidth/2)+(stage.stageWidth/2*.97);			forward.y = stage.stageHeight-50;							/* menu controls */			search.x = stage.stageWidth/2;			search.y = stage.stageHeight + 160;			close_mc.x = stage.stageWidth/2 - 190;			close_mc.y = stage.stageHeight + 60;			_searchOut.x = stage.stageWidth/2 + 115;			_searchOut.y = stage.stageHeight + 160;						vid.x = stage.stageWidth/2 - 310; //900-704            vid.y = stage.stageHeight/2 - 194;			vidback.x = stage.stageWidth/2;			vidback.y = stage.stageHeight/2;			play_button.x = stage.stageWidth/2 - 48;			play_button.y = stage.stageHeight/2 + 113;			play_button.height = 33;			play_button.width = 33;			play_button.alpha = .7;			play_button.visible = false;									//video controls			rwdVid.x = stage.stageWidth/2 - 90;			rwdVid.y = stage.stageHeight/2 + 178.8;			rwdVidover.x = stage.stageWidth/2 - 90;			rwdVidover.y = stage.stageHeight/2 + 178.8;			rwdVidover.visible = false;			startVid.x = stage.stageWidth/2 - 45;			startVid.y = stage.stageHeight/2 + 178.8;			startVid.visible = false;			startVidover.x = stage.stageWidth/2 - 45;			startVidover.y = stage.stageHeight/2 + 178.8;			replay.x = stage.stageWidth/2 - 45;			replay.y = stage.stageHeight/2 + 178.8;			replay.visible = false;						pauseVid.x = stage.stageWidth/2;			pauseVid.y = stage.stageHeight/2 + 178.8;			pauseVidover.x = stage.stageWidth/2;			pauseVidover.y = stage.stageHeight/2 + 178.8;			fwdVid.x = stage.stageWidth/2 + 45; // -55			fwdVid.y = stage.stageHeight/2 + 178.8;			fwdVidover.x = stage.stageWidth/2 + 45; // -55			fwdVidover.y = stage.stageHeight/2 + 178.8;			fwdVidover.visible = false;			closeVid.x = stage.stageWidth/2 + 300;			closeVid.y = stage.stageHeight/2 + 180;			closeVid.buttonMode = true;			closeVid.visible = true;						vidShow();			window_resize();		}				public function vidShow():void {						if (itemSelected) { 				playVid();			}else{				removeVid();			}						if (displayItem && !vid.visible) {				paneOver.visible = true;				myDesc.visible = true;				shortDesc.visible = true;				vid.visible = false;			} 						if (displayItem && vid.visible) {				paneOut.visible = true;				myDesc.visible = false;				shortDesc.visible = false;				vid.visible = true;			}								}								public function window_resize():void {			if (stage.stageWidth<=1030) {								 // (|| stage.stageHeight<=595) second part of the if statement leaving just in case...								addChild(warning_screen);				warning_screen.x = stage.stageWidth/2;				warning_screen.y = stage.stageHeight/2;				warning_screen.visible = true;				//warning_screen.scaleMode = StageScaleMode.NO_SCALE;								//trace(warning_screen.x);				//trace(warning_screen.y);								TransitionManager.start(warning, {type:Zoom, direction:Transition.IN, duration:1, easing:Bounce.easeOut});				//TransitionManager.start(warning_screen, {type:Zoom, direction:Transition.IN, duration:1, easing:Bounce.easeOut});			} else						warning_screen.visible = false;					}					}}