package alessandra.gallery{			import flash.display.*;	import alessandra.gallery.*;	import flash.events.*;	import flash.ui.Mouse;	//importing classes	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.text.AntiAliasType;	import flash.filters.*;	import flash.net.*;	import flash.utils.*;	import flash.geom.*;	import caurina.transitions.*;	import caurina.transitions.properties.FilterShortcuts;	import caurina.transitions.properties.ColorShortcuts;	//initialize the shortcuts			public class Main extends Sprite	{		// variable declarations		public var imgcon:MovieClip = new MovieClip();		public var barcon:MovieClip = new MovieClip();		public var i:Number=0;		public var poz:Number=0;		public var mpoz:Number=0;		public var xmlLoader:URLLoader = new URLLoader();		public var vec:Array = new Array();		public var img:Array = new Array();		public var j:Number;		public var l:Loader = new Loader();								public function Main()		{			// set stage properties			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			FilterShortcuts.init();			ColorShortcuts.init();			init();		}				private function init():void		{			xmlLoader.addEventListener(Event.COMPLETE, showXML);//function to load after the xml has loaded			xmlLoader.load(new URLRequest("gallery.xml"));			bar_mc.visible = false;			barcon.buttonMode = true;					}		public function showXML(e:Event):void {			XML.ignoreWhitespace = true;			var gal:XML = new XML(e.target.data);//loading the xml			//more variable declaring after the xml has loaded			var nr:Number = 0;//the number of the live image			var cStart:ColorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);//color transform for the mask masking the image		    var cEnd = new ColorTransform(1, 1, 1, 1, gal.setting.whiteAmmount, gal.setting.whiteAmmount, gal.setting.whiteAmmount, 0);			var slideTime:Number = gal.setting.slideTime.text();			var w:Number = gal.setting.width.text();//importing for later use, the variables from the xml			var h:Number = gal.setting.height.text();			var nrcurr:int = 0;			var tw:int = gal.setting.twidth.text();			var th:int = gal.setting.theight.text();			var ts:int = gal.setting.tspace.text();			var nrprev:int = 0;			var stext:String=""			var mc:MovieClip = new MovieClip();			//positioning the bar and the texts			bar_mc.bar_bg.width = w;			bar_mc.search_mc.alpha = 0.6;			bar_mc.desc_txt.y = gal.setting.bh.text() - 17;			bar_mc.desc_txt.x = 2;			bar_mc.desc_txt.width = w - 140;			bar_mc.search_mc.y = gal.setting.bh.text() - 17;			bar_mc.search_mc.x = w - 127;			bar_mc.bar_bg.height = gal.setting.bh.text()			//adding image containers			addChild(imgcon);			bar_mc.addChild (barcon)			barcon.y = 3;			barcon.x = 0;			for (i=0; i<= gal.picture.length(); i++) {				if(i == gal.picture.length())				{for(j=0;j<gal.picture.length();j++)					{						imgcon.addChild(img[j]);						setChildIndex(imgcon, 0);						//function to load the big images												}				break;				}						var container_mc:MovieClip = new container();						poz = Math.floor(w / 2 - tw / 2 - ((tw + ts) / 2 * (gal.picture.length() - 1)));						nrel = poz;			container_mc.x=mpoz;			container_mc.y=0;			mpoz = mpoz + w;			var loader_mc:PreLoader = new PreLoader();			container_mc.incarca(new URLRequest(gal.picture[i].file.text()), gal.picture[i].description.text(), loader_mc, w, gal.setting.height.text(),i,bar_mc)						img.push(container_mc);			}			function onRoll(e:MouseEvent):void			{				if(e.currentTarget.nr!=nrcurr)				//changing the roll over effect for thumbs					e.currentTarget.alpha = 0.8;			}			function onRollOut(e:MouseEvent):void			{				if(e.currentTarget.nr!=nrcurr)					e.currentTarget.alpha = 0.5;			}			var swc:Boolean=false;			function copyBits():void			{				for (i = 0; i <= gal.picture.length(); i++)				{					if (i == gal.picture.length())					{						//adding the thumbs on stage						for (j = 0; j < i; j++ )						{barcon.addChild(vec[j]);						swc = true;						}					}					else {				var tc:ThumbContainer = new ThumbContainer();				tc.incarca(new URLRequest(gal.picture[i].thumb.text()), tw, th, i)				tc.x = poz;				tc.alpha = 0.5;				poz += tw+ts;								vec.push(tc);				tc.addEventListener(MouseEvent.ROLL_OVER, onRoll)				tc.addEventListener(MouseEvent.ROLL_OUT, onRollOut)				tc.addEventListener(MouseEvent.CLICK,onClickB)					}				}							}			copyBits();			function onClickB(e:MouseEvent):void			{//function when the thumb is clicked				if (bar_mc.search_mc.search_txt.text != "Search...") stext = bar_mc.search_mc.search_txt.text;				bar_mc.search_mc.search_txt.text="Search..."				if (e.currentTarget.nr != nrcurr)				{				vec[nrcurr].alpha = 0.5;				nrprev = nrcurr;				nrcurr = e.currentTarget.nr;				vec[nrcurr].alpha = 1;				bar_mc.desc_txt.htmlText = img[e.currentTarget.nr].description;				trans(img[nrprev], img[nrcurr]);				}			}							var mbox:Sprite = new Sprite();			var mbar:Sprite = new Sprite();						function createMasks(){			mbox.graphics.beginFill(0x000000);			mbox.graphics.drawRect(0, 0, w, h);			mbox.graphics.endFill();			imgcon.mask = mbox;			mbar.graphics.beginFill(0x000000);			mbar.graphics.drawRect(0, h-gal.setting.bh.text(), w, gal.setting.bh.text());			mbar.graphics.endFill();			bar_mc.mask = mbar;			}			createMasks();			function trans(ontop:MovieClip, onbot:MovieClip):void			{//function for the trtansitions				onbot.x = 0;				onbot.alpha = 0;							Tweener.addTween(ontop, { alpha:0, time:gal.setting.animationTime.text() } );			Tweener.addTween(onbot, {alpha:1, time:gal.setting.animationTime.text()});			}			addEventListener(Event.ENTER_FRAME, checkPos)			function checkPos (e:Event)			{//function to display the bar when the mouse is in the position named in the xml				if (mouseY > h - gal.setting.bh.text())			Tweener.addTween(bar_mc, { y: h - gal.setting.bh.text(), time: 0.5 } )			else			Tweener.addTween(bar_mc, { y: h - gal.setting.barHeightWhenAutohide.text(), time: 0.5 } )			}			bar_mc.desc_txt.htmlText = img[nrcurr].description;			imgcon.addEventListener(MouseEvent.CLICK, onClick)			function onClick(e:MouseEvent)			{				//function to load when clicked on the big image				if (bar_mc.search_mc.search_txt.text != "Search...") stext = bar_mc.search_mc.search_txt.text;				bar_mc.search_mc.search_txt.text = "Search..."				vec[nrcurr].alpha = 0.5;				if (nrcurr == gal.picture.length()-1)				{					trans(img[nrcurr], img[0])					nrcurr = 0;					vec[nrcurr].alpha = 1;					bar_mc.desc_txt.htmlText = img[nrcurr].description;				}				else{				trans(img[nrcurr], img[nrcurr +1])				nrcurr++;				vec[nrcurr].alpha = 1;				bar_mc.desc_txt.htmlText = img[nrcurr].description;				}			}			mc = vec[0];			mc.alpha = 1;			//inputTextField.addEventListener(Event.CHANGE, changeHandler);						//search engine starts here...						var nrel:int = gal.picture.length();			bar_mc.search_mc.addEventListener(MouseEvent.CLICK, searchMc)			bar_mc.search_mc.addEventListener(MouseEvent.ROLL_OVER, searchMc)			bar_mc.search_mc.addEventListener(MouseEvent.ROLL_OUT, searchMc)			function searchMc(e:MouseEvent):void			{				//function for searching				if (e.type == "rollOver")				e.currentTarget.alpha = 1;				if (e.type == "rollOut")				e.currentTarget.alpha = 0.6;				if (e.type == "click")				{					bar_mc.search_mc.search_txt.addEventListener(Event.CHANGE, changeHandler);//when the text has changed					bar_mc.search_mc.search_txt.text = stext;					function changeHandler(e:Event):void					{						nrel = 0;						for (i = 0; i < vec.length; i++)//this is the graphics array object							{vec[i].visible = false;							var aux:String = img[i].description.toLowerCase();							if (aux.search(bar_mc.search_mc.search_txt.text.toLowerCase()) != -1)								{									nrel++;									vec[i].visible = true;								}							}						if (nrel * (tw+ts) > w)						addEventListener(MouseEvent.MOUSE_MOVE, moveBar)						else removeEventListener(MouseEvent.MOUSE_MOVE, moveBar)						poz = Math.floor(w / 2 - tw/2 - ((tw+ts)/2 * (nrel-1)));						barcon.x = 0;						for (i = 0; i < vec.length; i++)							{								if (vec[i].visible == true)								{								vec[i].x = poz;								poz = poz + tw+ts;								}							}					}				}			}			if (gal.picture.length() * (tw+ts) > w)				addEventListener(MouseEvent.MOUSE_MOVE, moveBar)			function moveBar(e:MouseEvent):void			{				if (swc == true)				{				if (nrel * (tw+ts) > w)				{					i = 0;					if (vec[i].visible == true)					{						var aux:Number = w / (2*-vec[i].x);						barcon.x = -mouseX / aux - vec[i].x;						//poz = Math.floor(w / 2 - 20 - (21 * nrel));					}					else 					if (i == (gal.picture.length() - 1)) ; 					else i++;				}				}				}		}				}	}