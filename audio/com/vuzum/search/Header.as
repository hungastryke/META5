/**************************************** *  Search class (AS3)  *  email: office@vuzum.com	 *  2009 Vuzum Media, LLC. www.vuzum.com ***************************************/ package com.vuzum.search{		import flash.text.TextFieldAutoSize;		import flash.text.TextFormat;	import flash.display.MovieClip;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FocusEvent;	import com.vuzum.utils.*;	import caurina.transitions.*;	import caurina.transitions.properties.*;		public class Header extends MovieClip	{				// COMPONENTS INSIDE		public var mcTitleText : MovieClip;			public var mcTextBackground : MovieClip;			public var mcBackground : MovieClip;		public var mcSearchIcon : MovieClip;		public var mcInputText : MovieClip;					// INTERNAL MEMBERS		public var mcList : List;				// VARIABLES		private var margin : Number = 15;		private var iconMargin : Number = 3;		private var textMargin : Number = 5;		private var list : Array = new Array;		private var indexList : Array;		private var deleteColor : Number;		private var iconColor : Number;		/*		 * SEARCH CONSTRUCTOR		 */		public function Header()		{			// Prototypes						new Prototypes();			ColorShortcuts.init();			FilterShortcuts.init();						// title//			mcTitleText.txt.embedFonts = true;//			mcTitleText.txt.autoSize = TextFieldAutoSize.LEFT;						// input text			mcInputText.txt.embedFonts = true;						// search button			mcSearchIcon.mcDelete.alpha = 0;			mcSearchIcon.mouseChildren = false;			mcSearchIcon.mouseEnabled = false;			mcSearchIcon.buttonMode = true;			mcSearchIcon.addEventListener(MouseEvent.MOUSE_UP, deleteRelease);					} 				/**		 * INITIALIZE THE SEARCH FIELD		 */		public function init(pList, searchBackgroundWidth : Number, searchBackgroundHeight : Number, searchBackgroundColor : Number, searchTextBackgroundColor : Number, searchTextBackgroundHeight : Number, searchTitleText : String, searchTitleColor : Number, searchTitleFontSize : Number, searchTextColor : Number, searchTextFontSize : Number, searchIconBackgroundColor : Number, searchIconColor : Number, contentMargin : Number, array : Array, searchDeleteColor : Number) : void		{			mcList = pList;			list = array;			deleteColor = searchDeleteColor;						var titleFormat : TextFormat = new TextFormat();			titleFormat.size = searchTitleFontSize;			mcTitleText.txt.defaultTextFormat = titleFormat;						var textFormat : TextFormat = new TextFormat();			textFormat.size = searchTextFontSize;			mcInputText.txt.defaultTextFormat = textFormat;						// BACKGROUND			mcBackground.width = searchBackgroundWidth;			mcBackground.height = searchBackgroundHeight;			mcBackground.setColor(searchBackgroundColor);			// INPUT TEXT BACKGROUND			mcTextBackground.height = searchTextBackgroundHeight;			mcTextBackground.setColor(searchTextBackgroundColor);						// TITLE TEXT			mcTitleText.txt.initText(searchTitleText);			mcTitleText.txt.textColor = searchTitleColor;			//			mcTitleText.x = margin;			mcTitleText.y = Math.round((searchBackgroundHeight - mcTitleText.height)/2 + 1);			mcTextBackground.y = Math.round((searchBackgroundHeight - searchTextBackgroundHeight)/2);			mcTextBackground.x = Math.round(mcTitleText.x + mcTitleText.width + margin);			mcTextBackground.width = Math.round(mcBackground.width - 3 * margin - mcTitleText.width);						// SEARCH ICON			iconColor = searchIconBackgroundColor;			mcSearchIcon.mcBackground.setColor(searchIconBackgroundColor);			mcSearchIcon.mcIcon.setColor(searchIconColor);			//			mcSearchIcon.mcBackground.height = mcSearchIcon.mcBackground.width = Math.round(searchTextBackgroundHeight - iconMargin * 2);			mcSearchIcon.mcIcon.x = Math.round((mcSearchIcon.mcBackground.width - mcSearchIcon.mcIcon.width)/2);			mcSearchIcon.mcIcon.y = Math.round((mcSearchIcon.mcBackground.height - mcSearchIcon.mcIcon.height)/2);			//			mcSearchIcon.mcDelete.x = Math.round((mcSearchIcon.mcBackground.width - mcSearchIcon.mcDelete.width)/2);			mcSearchIcon.mcDelete.y = Math.round((mcSearchIcon.mcBackground.height - mcSearchIcon.mcDelete.height)/2);			//			mcSearchIcon.y = Math.round(iconMargin + mcTextBackground.y);			mcSearchIcon.x = Math.round(mcTextBackground.x + mcTextBackground.width - mcSearchIcon.width - iconMargin);						// INPUT TEXT			mcInputText.txt.width = Math.round(mcTextBackground.width - 2 * textMargin - mcSearchIcon.width - 2 * iconMargin);//			mcInputText.txt.border = true;			//			mcInputText.x = Math.round(textMargin + mcTextBackground.x);			mcInputText.y = Math.round(mcTextBackground.y + (mcTextBackground.height - mcInputText.height)/2);			//			mcInputText.txt.addEventListener(Event.CHANGE, inputChangeHandler);			mcInputText.txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			mcInputText.txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);						// SET THE FOCUS			stage.focus = mcInputText.txt;		}				/**		 * SET TEXT FOCUS		 */		private function focusInHandler(event : FocusEvent) : void		{			//Tweener.addTween(mcSearchIcon, {alpha : 0.5, time : 0.5, transition : "easeOutExpo"});		}				/**		 * LOOSE TEXT FOCUS		 */		private function focusOutHandler(event : FocusEvent) : void		{			//Tweener.addTween(mcSearchIcon, {alpha : 1, time : 0.5, transition : "easeOutExpo"});		}						/**		 * CHANGE EVENT HANDLER		 */		private function inputChangeHandler(event : Event) : void		{			// call change function			changeText();						var eraseFlag : Boolean = String(mcInputText.txt.text).length > 0 ? true : false;						// change background			Tweener.addTween(mcSearchIcon.mcBackground, {_color : eraseFlag ? deleteColor : iconColor, time : 0.5, transition : "easePOutExpo"});						// hide search icon			Tweener.addTween(mcSearchIcon.mcIcon, {alpha : eraseFlag ? 0 : 1, time : 0.5, transition : "easePOutExpo"});							// show delete icon//			Tweener.addTween(mcSearchIcon, {alpha : eraseFlag ? 1 : 0.5, time : 0.5, transition : "easeOutExpo"});			Tweener.addTween(mcSearchIcon.mcDelete, {alpha : eraseFlag ? 1 : 0, time : 0.5, transition : "easePOutExpo"});						// en / desable button							mcSearchIcon.mouseEnabled = eraseFlag;		}				/**		 * SEARCH ICON RELEASE TO DELETE THE INPUT CONTENT		 */		private function deleteRelease(event : MouseEvent) : void		{			mcInputText.txt.text = "";						Tweener.addTween(mcSearchIcon.mcBackground, {_color : iconColor, time : 0.5, transition : "easePOutExpo"});			Tweener.addTween(mcSearchIcon.mcDelete, {alpha : 0, time : 0.5, transition : "easePOutExpo"});			Tweener.addTween(mcSearchIcon.mcIcon, {alpha : 1, time : 0.5, transition : "easePOutExpo"});										mcSearchIcon.mouseEnabled = false;						// set focus			stage.focus = mcInputText.txt;						// change the text			changeText();		}						/**		 * CHANGE TEXT		 */		private function changeText() : void		{			indexList = new Array();						for(var i : uint = 0; i < list.length; i++)			{				//if(String(list[i].title).substring(0, Main.getInstance().listItemVisibleCharacters).toLowerCase().search(String(mcInputText.txt.text).toLowerCase()) != -1 || String(list[i].info).substring(0, Main.getInstance().listItemVisibleCharacters).toLowerCase().search(String(mcInputText.txt.text).toLowerCase()) != -1)				// use "escape" function for detecting special characters like &, $, *, @, ^, etc.				if(escape(String(list[i].title)).substring(0, Search(parent).listItemVisibleCharacters).toLowerCase().search(escape(String(mcInputText.txt.text)).toLowerCase()) != -1 || escape(String(list[i].info)).substring(0, Search(parent).listItemVisibleCharacters).toLowerCase().search(escape(String(mcInputText.txt.text)).toLowerCase()) != -1)				{					indexList.push(i);				}			}						mcList.updateList(indexList);		}			} // CLASS}// PACKAGE