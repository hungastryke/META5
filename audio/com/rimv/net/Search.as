package {		public class Search extends Sprite {			//this is the function for the search engine	public function searchAlbum() {	  var albumName;	  album = new XML();	  album.onLoad = newAlbum;	  album.ignoreWhite = true;	  album.load("playlist.xml");	  function newAlbum() {		for (var count01=0; count01<=model.childNodes.length; count01++) {		  if (this.childNodes[count01].nodeName.toLowerCase() == "albums") {		  modelsDescryption = this.childNodes[count01];   		  }		}	   findMFModels(albumsDescryption); 	 }    //here we use a new argument for the function    public function findAlbums(myAlbum) {      var myAlbum;      var albumName;      for (var count02=0; count02<=myAlbum.childNodes.length; count02++) {        if (myModel.childNodes[count02].nodeName.toLowerCase() == albumName) {        //we now have access to one childnode        //now the var modelsDescryption holds only the contents of the first Child of        //the childnode "albumName". albumName can be any of        //the child nodes of our XML document        albumsDescryption = myAlbum.childNodes[count02].firstChild;        //this will show the firstChild content in the scrollbar textfield        InstanceName_0.text = albumsDescryption;        //here we are accessing the attribute "name"        headline = myAlbum.childNodes[count02].attributes.name;        //here we are accessing the attribute "photo"        pic = myAlbum.childNodes[count02].attributes.photo;        //we load the swf into an empty MC        loadMovie(pic,"albumHolder");        }       }      }     }    //function to get to the root node and the childnodes    function newAlbum() {      //loop going through the xml file whereby childNodes.length is the number of child nodes      for (var count01=0; count01<=album.childNodes.length; count01++) {        //the root node name "albums"        if (this.childNodes[count01].nodeName.toLowerCase() == "albums") {          //this var holds the complete xml file          albumsDescryption = this.childNodes[count01];          }        }        //function to get access to individual childnodes        //albumsDescryption will carry over the extracted contents from the previous        //function to the next function        findAlbums(albumsDescryption);       }     //function to preload pics    function loadAll(firstPic,lastPic,picName){      for (j=firstPic;j<=lastPic;j++) {      duplicateMovieClip (_root.modelHolder_1,"pic_"+j, j);      setProperty ("pic_"+j, _alpha, (0));      loadMovie(picName+j+".swf","pic_"+j);      loadMovie(picName+j+".swf","modelHolder_1");      setProperty("modelHolder_1",_alpha, (0));      }    }	    loadAll(1,6,"pic_"); //might need to adjust these parameters to suit your playlist    loadMovie("playlist.swf","albumHolder");    //general function to upload and get access to the xml files    //for the buttons    function showAlbum(albumName,fileName) {      //this is to empty the preloader textfield      counter="";      //variables for the name of the model and for the xml file      var albumName;      var fileName;      //uploading the xml, model is just an instance we use here      album = new XML();      album.onLoad = newAlbum;      //this facilitates accessing the xml tree, since white      //space is also considered childnode      //the use of ignoreWhite, however, should be avoided if possible      album.ignoreWhite = true;      album.load(fileName);    //here is a specific function for the search engine with the var myModel    function findAlbum(myModel) {      var myAlbum;      var albumName;      for (var count02=0; count02<=myAlbum.childNodes.length; count02++) {        //we are defining the var albumName here        albumName = myModel.childNodes[count02].nodeName.toLowerCase();        //here the string from the input textfield is compared        //with the name of the childnodes        if (searchWindow.toLowerCase() == albumName) {          //if there is a match we do all this          albumsDescryption = myAlbum.childNodes[count02].firstChild;             InstanceName_0.text = modelsDescryption;          headline = myAlbum.childNodes[count02].attributes.name;          pic = myAlbum.childNodes[count02].attributes.photo;          loadMovie(pic,"albumHolder");        //if there is no match...        //see below for special comment        }else if (searchWindow.toLowerCase() !== headline.toLowerCase()){          //we continue searching in another xml file, this can be done for many          //xml files in a row          searchMAlbum();        }       }      }     }		}}