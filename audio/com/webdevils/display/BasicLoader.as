package com.webdevils.display {	import flash.display.*;	import flash.events.*;	import flash.net.*;		public class BasicLoader extends Sprite {				public function BasicLoader( url:String = null ) {			if ( url != null ) {				load( url );			}		}		public function load( url:String ):void {			var loader = new Loader();			loader.load( new URLRequest( url ) );			configure_listeners( loader.contentLoaderInfo );		}		private function configure_listeners( e:IEventDispatcher ):void {			e.addEventListener( Event.COMPLETE, on_complete, false, 0, true );// loader.contentLoaderInfo.addEventListener( type, handler, false, 0, true )			e.addEventListener( ProgressEvent.PROGRESS, on_progress, false, 0, true );			e.addEventListener( HTTPStatusEvent.HTTP_STATUS, on_httpStatus, false, 0, true );			e.addEventListener( Event.INIT, on_init, false, 0, true );			e.addEventListener( IOErrorEvent.IO_ERROR, on_ioError, false, 0, true );			e.addEventListener( Event.OPEN, on_open, false, 0, true );			e.addEventListener( Event.UNLOAD, on_unload, false, 0, true );		}		private function remove_listeners( e:IEventDispatcher ):void {			e.removeEventListener( Event.COMPLETE, on_complete );			e.removeEventListener( ProgressEvent.PROGRESS, on_progress );			e.removeEventListener( HTTPStatusEvent.HTTP_STATUS, on_httpStatus );			e.removeEventListener( Event.INIT, on_init );			e.removeEventListener( IOErrorEvent.IO_ERROR, on_ioError );			e.removeEventListener( Event.OPEN, on_open );			e.removeEventListener( Event.UNLOAD, on_unload );		}		protected function on_complete( e:Event ):void {			addChild( e.target.content );			dispatchEvent( new Event( e.type, e.bubbles, e.cancelable ) );			remove_listeners( e.target.loader.contentLoaderInfo );		}		protected function on_progress( e:ProgressEvent ):void {			dispatchEvent( new ProgressEvent( e.type, e.bubbles, e.cancelable, e.bytesLoaded, e.bytesTotal ) );		}		private function on_httpStatus( e:HTTPStatusEvent ):void {			dispatchEvent( new HTTPStatusEvent( e.type, e.bubbles, e.cancelable, e.status ) );		}		private function on_init( e:Event ):void {			dispatchEvent( new Event( e.type, e.bubbles, e.cancelable ) );		}		private function on_ioError( e:IOErrorEvent ):void {			dispatchEvent( new IOErrorEvent( e.type, e.bubbles, e.cancelable, e.text ) );		}		private function on_open( e:Event ):void {			dispatchEvent( new Event( e.type, e.bubbles, e.cancelable ) );		}		private function on_unload( e:Event ):void {			dispatchEvent( new Event( e.type, e.bubbles, e.cancelable ) );		}	}}